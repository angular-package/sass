// Sass.
@use 'sass:list';

// Variables.
@use '../function.variables' as variables;

// Modules.
@use 'call.list.function';

// Functions.
@use '../function.pick.function' as *;

// Status: DONE
// The `call.nested-list()` function calls `$function` on nested lists or function from each nested list of `$list` with a separator comma where
// elements are arguments or space where the whole list is an argument.
// Nested list can contain function name in the first element, then it's used instead of `$function` argument to call following list.
// @param `$list` List with nested lists on which to call `$function` or function from nested lists.
// @param `$prefix` Prefix to pick function name from nested lists of `$list`.
// @param `$function` Function name, with prefix of `$prefix` to call nested list in `$list` as arguments or argument.
// @returns The returned value is `$list` with nested lists invoked by function.
@function nested-list($list, $prefix: variables.$prefix, $function: null) {
  @if type-of($list) == list {
    @for $i from 1 through list.length($list) {
      @if type-of(list.nth($list, $i)) == list {
        $list: list.set-nth($list, $i, call.list(list.nth($list, $i), $prefix, $function));
      }
    }
  }
  @return $list;
}
