// Sass.
@use 'sass:list';

// Status: DONE
// The `range.down()` function returns the range of numbers where `$from` is higher than `$to`.
// @param `$from` The value of the number type indicates the beginning of the range.
// @param `$to` The value of the number type indicates the end of the range.
// @param `$step` The value of the number type indicates each increment of the range. By default, it's `1`.
// @param `$except` The value of a number or list of numbers not belonging to the range.
// @param `$separator` A separator between the given range numbers.
// @returns The returned value is the list of numbers of the given range.
@function down($from, $to, $step: 1, $except: null, $separator: auto) {
  @if $from > $to {
    $result: ();
    $number: $from;
    @if $step > 0 {
      $step: $step * -1;
    }
    @while $from >= $to {
      $result: if(
        not $except or ($except and not list.index($except, $from)),
        list.append($result, $from, $separator),
        $result
      );
      $from: $from + $step;
    }
    @return list.length($result) > 0 and $result or null;
  }
  @return $from == $to and $from or null;
}

// Examples.
// @debug down(1, 1); // 1
// @debug down(34, 34); // 34
// @debug down(20, 15); // 20 19 18 17 16 15

// step 0.1
// @debug down(1, 0.1, 0.1); // 1 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1

// step 2
// @debug down(15, -3, 2); // 15 13 11 9 7 5 3 1 -1 -3

// except
// @debug down(35, 20, 1, 20 35); // 34 33 32 31 30 29 28 27 26 25 24 23 22 21

// separator
// @debug down(25, 20, $separator: comma); // 25, 24, 23, 22, 21, 20

// null
// @debug down(20, 35); // null
