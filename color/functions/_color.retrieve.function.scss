// Modules.
@use '../../list';

// Status: DONE
// The `color.retrieve()` function returns a map with attributes obtained from `$name`.
// @param `$name` Color name of `list` type.
// @returns The returned value is a map of attributes obtained from `$name`.
@function retrieve($name) {
  $attributes: ();
  @if not (list.separator($name) == comma) and not (type-of(list.nth($name, 1)) == list) {
    $name: ($name,);
  }
  @if list.length($name) > 1 {
    $attributes: list.append($attributes, (lightness: number list, (hue saturation lightness alpha: number list): map), comma);
  }
  @if list.length($name) > 2 {
    $attributes: list.append($attributes, (alpha: number list, (alpha hue saturation: number list): map));
  }
  @if list.length($name) > 3 {
    $attributes: list.insert-nth($attributes, 1, (hue: number list, (hue saturation lightness alpha: number list): map));
  }
  @if list.length($name) > 4 {
    $attributes: list.insert-nth($attributes, 2, (saturation: number list, (saturation lightness alpha: number list): map));
  }
  @return list.to-map(
    $name,
    (name: list string),
    $attributes...
  );
}

// Examples.
// defined by the LVHA-order: :link — :visited — :hover — :active.

// @debug retrieve(primary); // (name: primary)
// @debug retrieve(primary dark); // (name: primary dark)

// comma separator
// length 1 lightness
// @debug retrieve((primary dark, 50%)); // (name: primary dark, lightness: 50%)
// @debug retrieve((primary dark, 50% 60%)); // (name: primary dark, lightness: 50% 60%) // :link 50%, :visited 50%, :hover 60%
// @debug retrieve((primary dark, 50% 40% 70% 60%)); // (name: primary dark, lightness: 50%) :link 50% :visited 40% :hover 70% :active 60%

// length 2 lightness, alpha
// @debug retrieve((primary dark, 50%, 0.5)); // (name: primary dark, lightness: 50%, alpha: 0.5)

// length > 2
// @debug retrieve((primary dark, 50deg, 5%, 3%)); // (name: primary dark, hue: 50deg, saturation: 5%, lightness: 3%)
// @debug retrieve((primary dark, 50deg, 5%, 3%, 0.9)); // (name: primary dark, hue: 50deg, saturation: 5%, lightness: 3%, alpha: 0.9)

// without comma separator
// @debug retrieve((primary dark) 50%); // (name: primary dark, lightness: 50%)
// @debug retrieve((primary dark) 50% 0.5); // (name: primary dark, lightness: 50%, alpha: 0.5)
// @debug retrieve((primary dark) 50deg 5% 3%); // (name: primary dark, hue: 50deg, saturation: 5%, lightness: 3%)
// @debug retrieve((primary dark) 50deg 5% 3% 0.9); // (name: primary dark, hue: 50deg, saturation: 5%, lightness: 3%, alpha: 0.9)

// @debug retrieve((primary dark) ('*' 50%)); // (name: primary dark, lightness: "*" 50%)
// @debug retrieve((primary dark, ('*' 50%), ('/' 0.5))); // (name: primary dark, lightness: "*" 50%, alpha: "/" 0.5)
// @debug retrieve((primary dark, ('*' 5deg), ('*' 2%), ('*' 15%))); // (name: primary dark, hue: "*" 5deg, saturation: "*" 2%, lightness: "*" 15%)
// @debug retrieve((primary dark, ('*' 5deg), ('*' 2%), ('*' 15%), ('*' 0.5))); // (name: primary dark, hue: "*" 5deg, saturation: "*" 2%, lightness: "*" 15%, alpha: "*" 0.5)
