// Sass.
@use 'sass:list';

// Functions.
@use 'selector.class.function' as *;
@use 'selector.nest.function' as *;

// Status: TODO: Check name function.
// The `selector.tag()` function.
// @param `$tag`
// @param `$class`
// @param `$pseudo-class`
// @param `$dictionary`
// @returns
@function tag($tag, $class, $pseudo-class: (), $dictionary: ()) {
  @return nest($tag, class($class, $dictionary: $dictionary), $pseudo-class);
}

// Examples.
// tag input + class
// @debug tag(input, lg); // (input .lg,)
// @debug tag(input, '&lg'); // (input.lg,)
// @debug tag(input, '&' lg); // (input.lg,)

// input + class + :hover
// @debug tag(input, lg, '&:hover'); // (input .lg:hover,)
// @debug tag(input, '&lg', '&:hover'); // (input.lg:hover,)

// input + class + dictionary
// @debug tag(input, form lg, $dictionary: (lg: large)); // (input .form-large,)
// @debug tag(input, form__ submit --disabled , $dictionary: (submit: submit-basic, separator: null)); // (input .form__submit-basic--disabled,)
// @debug tag(input, '&form--' theme -xmas , $dictionary: (xmas: basic, separator: null)); // (input.form--theme-xmas,)

// multiple classes
// @debug tag(input, form (lg, sm)); // input .form-lg, input .form-sm
// @debug tag(input, form (lg, md, sm)); // input .form-lg, input .form-md, input .form-sm
// @debug tag(input, '&' form (lg, md, sm)); // input.form-lg, input.form-md, input.form-sm

// pseudo selector
// @debug tag('input', '&form' input (lg, sm), '&:hover'); // input.form-input-lg:hover, input.form-input-sm:hover
// @debug tag('input', '&form' input (lg, sm), ('&:hover', '&:visited')); // input.form-input-lg:hover, input.form-input-lg:visited, input.form-input-sm:hover, input.form-input-sm:visited
