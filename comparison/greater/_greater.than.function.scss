// Sass.
@use 'sass:list';
@use 'sass:meta';

// Functions.
@use 'greater.than-any.function' as greater-than-any;
@use 'greater.than-every.function' as greater-than-every;

// Status: DONE
// The `greater.than()` function checks whether `$greater` is greater than compared `$value` and additional `$numbers`.
// @param `$greater` The number to be compared against required `$value` and additional `$numbers`.
// @param `$value` Required number to be less than `$greater` or any/every occurrence of `$numbers`.
// @arbitrary `$numbers...` Any of additional numbers or every additional number to be less than `$greater`.
// @returns The returned value is a bool indicating whether `$greater` is greater than required `$value` and additional `$numbers`.
@function than($greater, $value, $numbers...) {
  $numbers: meta.type-of($value) == number and list.join($value, $numbers) or $numbers;
  @return if(
    if($value == any, any, every) == every,
    greater-than-every.than-every($greater, $numbers...),
    greater-than-any.than-any($greater, $numbers...)
  );
}

// Additional function name.
@function greater($greater, $value, $numbers...) {
  @return than($greater, $value, $numbers...);
}

// Examples.
// @debug than(11, 6); // true
// @debug than(6, 11); // false
// @debug than(6, 6); // false
// @debug than(7, 6, 3, 3, 3, 1); // true
// @debug than(4, any, 6, 3, 3, 3, 1); // true

// @debug greater(11, 6); // true
// @debug greater(6, 11); // false
// @debug greater(6, 6); // false
// @debug greater(7, 6, 3, 3, 3, 1); // true
// @debug greater(4, any, 6, 3, 3, 3, 1); // true
