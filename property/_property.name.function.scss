// Modules.
@use '../list';
@use '../selector';
@use '../string';

// Status: DONE
// The `property.name()` function returns property name or names built from arbitrary `$name`.
// @arbitrary `$names...` The name for property or multiple properties.
// @returns The return value is a property name or names built from `$name`.
@function name($names...) {
  // Map.
  $i: 1;
  @each $name in $names {
    @if type-of($name) == map {
      $-name: ();
      @each $key, $value in $name {
        $-name: list.append($-name, $key);
        @if $value {
          @if type-of($value) == map {
            @each $key, $value in $value {
              $-name: list.append($-name, $key, auto, $value);
            }
          } @else {
            $-name: list.append($-name, $value);
          }
        }
      }

      $names: list.set-nth($names, $i, $-name);
      $i: $i + 1;
    }
  }

  // Arbitrary.
  $i: 1;
  @each $name in $names {
    @if list.has-list($name) and list.separator($name) == space {
      $names: list.set-nth($names, $i, selector.nest($name...));
    }

    $i: $i + 1;
  }

  $names: selector.nest($names...);
  @for $i from 1 through list.length($names) {
    $names: list.set-nth(
      $names,
      $i,
      string.unquote(string.join('-', list.nth($names, $i))),
    );
  }

  // Returns.
  @return if(list.length($names) == 1, list.nth($names, 1), $names);
}
