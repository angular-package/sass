// Sass.
@use 'sass:list';
@use 'sass:map';

// Modules.
@use '../meta';
@use '../string';
@use '../values';
@use '../var';

// Functions.
@use '../functions/important.function' as *;

// @use '../list/remove/list.remove-string.function' as *;
@use '../list/remove/remove.value.function';
@use 'property.name.function' as property;

// Status: DONE
// The `property.set()` mixin sets property or properties.
// @param `$property-value` The property of map type to set.
// @param `$important` Indicates property is important.
// @param `$dictionary` Dictionary of map type to pass into `$function`.
// @param `$function` The function to invoke on arguments.
// @param `$list` Indicates to call list.
@mixin set($property-value, $important: false, $dictionary: (), $function: variables.$default-function, $list: false) {
  @if type-of($property-value) == map {
    $values: ();
    @each $property, $value in $property-value {
      $important: if($value and (list.index($value, !important) or $important), true, false);
      @if $important and type-of($value) == list {
        $value: remove.value($value, !important);
      }
      @each $name in property.name($property) {
        @if list.separator($value) == comma {
          #{$name}: values.call((function: $function, list: $list), $value...) + important($important);
        } @else {
          #{$name}: values.call((function: $function, list: $list), $value) + important($important);
        }
      }
    }
  }
}

// Examples.
// div {
  // FEATURE: (property: value)
  // @include set((padding: 10px)); // padding: 10px;

  // FEATURE: (property: value, value)
  // @include set((padding: (5px 10px, 14px))); // padding: 5px 10px, 14px;

  // FEATURE: (property: value + important, property: value + important)
  // @include set((padding: 5px '!important', margin: 15px !important)); // padding: 5px !important; margin: 15px !important;

  // FEATURE: ((property, property): value)
  // @include set(((padding, margin): 5px 10px)); // padding: 5px 10px;

  // FEATURE: ((property, property): value) + important
  // @include set(((padding, margin): 5px 10px), true);
  // padding: 5px 10px !important;
  // margin: 5px 10px !important;

  // functions
  // @include set(((padding, margin): --var-get (unit 5))); // get()
  // padding: var(--s-unit-5);
  // margin: var(--s-unit-5);

  // @include set(((border, background) color: --color primary dark)); // color()
  // border-color: var(--s-primary-color-dark);
  // background-color: var(--s-primary-color-dark);

  // functions + dictionary
  // @include set(((padding, margin): (unit 5)), false, (unit: u), $list: true);
  // padding: var(--s-u-5);
  // margin: var(--s-u-5);

  // FEATURE: ((property, property): value, value)
  // @include set(((padding, margin): (5px 10px, (--get unit 1) (--get unit 2)))); // padding: 5px 10px, var(--s-unit-1) var(--s-unit-2);
  // @include set((padding: (--get unit 1 ( '+' 15)) (--get unit 2))); // padding: calc(var(--s-unit-1) + 15) var(--s-unit-2);
  // @include set((background: (--color: primary dark) '!important')); // background: var(--s-primary-color-dark) !important;
  // @include set((background: (--color: primary dark) (--color: primary dark) '!important')); // background: var(--s-primary-color-dark) var(--s-primary-color-dark);
  // @include set((background: (--color: primary dark)), true); // background: var(--s-primary-color-dark) !important;

  // FEATURE: (property: value, property: value) + important
  // @include set((padding: 5px 10px, margin: 10px), true);
  // padding: 5px 10px !important;
  // margin: 10px !important;

  // @include set((border: 1px solid red, margin: 10px), true);
  // border: 1px solid red !important;
  // margin: 10px !important;

  // FEATURE: ((property, property) attribute: value)
  // @include set(((border, margin) color: --color primary dark));
  // border-color: var(--s-primary-color-dark);
  // margin-color: var(--s-primary-color-dark);

  // FEATURE: ((property,property) (attribute, attribute): value)
  // @include set(((padding, margin) (top, bottom): 27px));
  // padding-top: 27px;
  // padding-bottom: 27px;
  // margin-top: 27px;
  // margin-bottom: 27px;

  // FEATURE: ((property, property) (side, side) (side, side) (attribute, attribute): value)
  // @include set(((padding, margin) (top, right) (left, bottom) (radius, color): any));
  // padding-top-left-radius: any;
  // padding-top-left-color: any;
  // padding-top-bottom-radius: any;
  // padding-top-bottom-color: any;
  // padding-right-left-radius: any;
  // padding-right-left-color: any;
  // padding-right-bottom-radius: any;
  // padding-right-bottom-color: any;
  // margin-top-left-radius: any;
  // margin-top-left-color: any;
  // margin-top-bottom-radius: any;
  // margin-top-bottom-color: any;
  // margin-right-left-radius: any;
  // margin-right-left-color: any;
  // margin-right-bottom-radius: any;
  // margin-right-bottom-color: any;

  // @include set(((property1, property2) (side1, side2) attribute: --color primary dark));
  // @include set((((property1, property2): ((side1, side2): attribute)): --color primary dark));
  // property1-side1-attribute: var(--s-primary-color-dark);
  // property1-side2-attribute: var(--s-primary-color-dark);
  // property2-side1-attribute: var(--s-primary-color-dark);
  // property2-side2-attribute: var(--s-primary-color-dark);

  // FEATURE: (property: value, value)
  // @include set((box shadow: (3px 3px (--get red), -1em 0 0.4em olive)));
  // box-shadow: 3px 3px var(--s-red), -1em 0 0.4em olive;
// }
