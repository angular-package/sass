// Sass.
@use 'sass:list';
@use 'sass:meta';
@use 'sass:string';

// Variables.
@use 'comparison.operators.var' as *;

// Status: TODO: number of pairs in a map.
// The `comparison.compare()` function returns a bool indicating the result of the comparison.
// @param `$value` The value to compare with the given `$operand`.
// @param `$operator` The operator used to compare `$value` and `$operand`.
// @param `$operand` The value to compare with the given `$value`.
// @returns The returned value is a `bool` indicating the result of the comparison.
@function compare($value, $operator, $operand) {
  $result: null;
  $not: string.index($operator, '!') and true or false;
  $check-type: null;

  // List length.
  @if string.index($operator, '(,)') and string.length($operator) > 3 {
    $check-type: meta.type-of($value) == list or meta.type-of($value) == map;
    $value: $check-type and list.length($value) or $value;

  // Map length.
  } @else if string.index($operator, '(:)') and string.length($operator) > 3 {
    // @deprecated
    $check-type: meta.type-of($value) == map;
    $value: $check-type and list.length($value) or $value;

  // Type of.
  } @else if string.index($operator, ':') == 1 {
    $operator: string.slice($operator, $not and 3 or 2, -1);
    $value: meta.type-of($value);
    $operand: if(not $operand, meta.type-of($operand), $operand);
  }

  // Use functions depending on the given operator.
  @each $operators, $functions in $operators {
    @if list.index($operators, $operator) {
      @each $function in $functions {
        $result: list.append(
          $result,
          meta.call($function, $value, $operand),
          comma
        );
      }

      @for $i from 1 through list.length($result) {
        $result: meta.type-of(list.nth($result, $i)) == number
          and list.set-nth($result, $i, true)
          or $result;
      }
    
      // Check whether the `$result` contains `true`.
      $result: list.index($result, true) and true or false;
    
      // Check the type for list and map length.
      $result: (meta.type-of($check-type) == bool
        and $check-type and $result) or $result;
    }
  }

  // Returns comparison result.
  @return if($not, not $result, $result);
}

// Additional function name.
@function single($value, $operator, $operand) {
  @return compare($value, $operator, $operand);
}

// Operator.
// '===' comparable
// '==', // equal to
// '!=', // not equal to
// '~=', // text contains the given string (string.index())
// '!~=', // text does not contain the given string (string.index())
// ':==', // type of the given value is equal to the given type
// ':!=',  // type of the given value is not equal to the given type
// '>',
// '>=',
// '<',
// '<='
// ':' type
// '(:)' map keys length
// '(,)' list length
// '?~=' string.index() operator
// '?=' list.index() operator

// Examples.
// ==
// Arbitrary.
// @debug compare(27, '==', 27); // true
// @debug compare(27px, '==', 27em); // false
// @debug compare('bold ', '!~=', 'bold'); // false

// List.
// @debug compare(27 '==' 27...); // true
// @debug compare((27, '==', 27)...); // true

// Map.
// @debug compare((value: 27, operator: '==', operand: 27)...); // true

// @debug compare('there is a word', '==', 'there is a word'); // true
// @debug compare(null, '==', null); // true
// @debug compare((a: 2222), '==', ('a': 2222)); // true

// SECTION: math.compatible() === 
// @debug compare(27px, '===', 27px); // true
// @debug compare(27px, '===', 27em); // false

// SECTION: NOT math.compatible() !=== 
// @debug compare(27px, '!===', 27px); // false
// @debug compare(27px, '!===', 27em); // true



// SECTION: NOT equal() == or =
// @debug compare(27, '==', 27); // true
// @debug compare('there is a word', '==', 'there is a word'); // true
// @debug compare(null, '==', null); // true
// @debug compare((a: 2222), '==', ('a': 2222)); // true
// @debug compare(true, '==', null); // false

// SECTION: NOT equal() !== or !=
// @debug compare(27, '!==', 27); // false
// @debug compare('there is a word', '!==', 'there is a word'); // false
// @debug compare(null, '!==', null); // false
// @debug compare((a: 2222), '!==', ('a': 2222)); // false
// @debug compare(true, '!==', null); // true



// SECTION: meta.type-of() :==
// @debug compare('a', ':==', string); // true
// @debug compare(null, ':==', null); // true
// @debug compare(false, ':==', bool); // true

// SECTION: NOT meta.type-of() :!==
// @debug compare(3, ':!=', string); // true
// @debug compare(27, ':!==', string); // true
// @debug compare('a', ':!==', string); // false
// @debug compare(null, ':!==', null); // false
// @debug compare(false, ':!==', bool); // false



// SECTION: string.index() ~=
// @debug compare('bold king', '~=', 'bold'); // true

// SECTION: NOT string.index() !~=
// @debug compare('bold king', '!~=', 'word'); // true
// @debug compare('bold king', '!~=', 'bold'); // false



// SECTION: than.greater() >
// @debug compare(3, '>', 1); // true
// @debug compare(3, '>', 5); // false

// SECTION: NOT than.greater() !>
// @debug compare(3, '!>', 1); // false
// @debug compare(3, '!>', 5); // true



// SECTION: than.greater() or equal >=
// @debug compare(3, '>=', 1); // true
// @debug compare(3, '>=', 3); // true

// SECTION: NOT than.greater() or equal !>=
// @debug compare(3, '!>=', 1); // false
// @debug compare(3, '!>=', 3); // false



// SECTION: than.less() <
// @debug compare(3, '<', 1); // false
// @debug compare(3, '>', 5); // false

// SECTION: NOT than.less() !<
// @debug compare(3, '!<', 1); // true
// @debug compare(1, '!<', 3); // false



// SECTION: than.less() or equal() <=
// @debug compare(3, '<=', 1); // false
// @debug compare(3, '<=', 3); // true

// SECTION: NOT than.less() or equal() !<=
// @debug compare(3, '!<=', 1); // true
// @debug compare(3, '!<=', 3); // false



// SECTION: list.is-length() (,)
// @debug compare(('a', 'b', 'c'), '(,)', 3); // true
// @debug compare(('a', 'b', 'c'), '(,)', 4); // false


// SECTION: list.length() equal() (,)==
// @debug compare(('a', 'b', 'c'), '(,)==', 3); // true
// @debug compare(('a', 'b', 'c'), '(,)==', 13); // false

// SECTION: list.length() NOT equal() (,)!=
// @debug compare(('a', 'b', 'c'), '(,)!=', 3); // false
// @debug compare(('a', 'b', 'c'), '(,)!=', 13); // true
// @debug compare(('a', 'b', 'c'), '(,)!==', 3); // false
// @debug compare(('a', 'b', 'c'), '(,)!==', 13); // true



// SECTION: list.length() and than.greater() (,)>
// @debug compare(('a', 'b', 'c'), '(,)>', 2); // true
// @debug compare(('a', 'b', 'c'), '(,)>', 3); // false

// SECTION: list.length() and NOT than.greater() (,)!>
// @debug compare(('a', 'b', 'c'), '(,)!>', 2); // false
// @debug compare(('a', 'b', 'c'), '(,)!>', 3); // true



// SECTION: list.length() and than.greater() or equal() (,)>=
// @debug compare(('a', 'b', 'c'), '(,)>=', 3); // true
// @debug compare(('a', 'b', 'c'), '(,)>=', 4); // false
// @debug compare(('a', 'b', 'c'), '(,)>=', 3); // true
// @debug compare(('a', 'b', 'c'), '(,)>=', 4); // false

// SECTION: list.length() and NOT than.greater() or equal() (,)!>=
// @debug compare(('a', 'b', 'c'), '(,)!>=', 3); // false
// @debug compare(('a', 'b', 'c'), '(,)!>=', 4); // true



// SECTION: list.length() and than.less() (,)<
// @debug compare(('a', 'b', 'c'), '(,)<', 4); // true
// @debug compare(('a', 'b', 'c'), '(,)<', 3); // false

// SECTION: list.length() and NOT than.less() (,)!<
// @debug compare(('a', 'b', 'c'), '(,)!<', 4); // true
// @debug compare(('a', 'b', 'c'), '(,)!<', 3); // false



// SECTION: list.length() and than.less() or equal() (,)<=
// @debug compare(('a', 'b', 'c'), '(,)<=', 3); // true
// @debug compare(('a', 'b', 'c'), '(,)<=', 2); // false

// SECTION: list.length() and NOT than.less() or equal() (,)!<=
// @debug compare(('a', 'b', 'c'), '(,)!<=', 3); // false
// @debug compare(('a', 'b', 'c'), '(,)!<=', 2); // true



// SECTION: list.length() or equal() (:)==
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)==', 3); // true
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)==', 4); // false

// SECTION: list.length() NOT equal() (:)!=
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)!=', 3); // false
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)!=', 2); // true



// SECTION: list.length() than.greater() (:)> than.less() (:)<
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)>', 3); // false
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)<', 2); // false

// SECTION: NOT list.length() than.greater() (:)!> than.less() (:)!<
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)!>', 3); // true
// @debug compare(('a': 1, 'b': 2, 'c': 3), '(:)!<', 3); // true
