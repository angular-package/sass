// Sass.
@use 'sass:list';
@use 'sass:map';

// Variables.
@use 'property.variables' as variables;

// Functions.
@use 'property.set.mixin';

// Modules.
@use '../class';
@use '../meta';
@use '../selector';

// Status: DONE
// Property `property.variant()` mixin sets property variant.
// @param `$variant` Property variant of `map` type to set. (See examples for map structure)
// @param `$important` Indicates property is `important`.
// @param `$pseudo-class` Pseudo class for class selector in `$variant`.
// @param `$dictionary` Dictionary to translate class selector and passed as (dictionary arguments) for called functions.
// @param `$class-function` Function to set class selector.
// @param `$prefix` Prefix(es) of the function name defined in value and/or `$type-function` that are used to call them on types in value.
// @param `$separator` Separator(s) of the function name defined in value and/or `$type-function`.
// @param `$type-function` A map of (type: function) to determine which types are to be invoked in property value.
// @param `$functions` Functions instead of global that can be called on property values.
// @param `$execute` Whether to execute `property.set()` function.
// // @param `$arguments` Additional arguments of `list` or `map` type to pass into called functions.
@mixin variant(
  // class, property
  $variant: (),
  $important: null,
  // class
  $pseudo-class: (),
  // class, value
  $dictionary: null,
  // class
  $class-function: meta.get-function(class, false, selector),
  // function
  $prefix: null,
  $separator: null,
  $type-function: null,
  $functions:null,
  $execute: true,
) {
  @if type-of($variant) == map {
    $type-function: if($type-function, $type-function, variables.$type-function);
    @include class.variant($variant, $pseudo-class, $dictionary, $class-function, map) using($resolved) {
      @if type-of(map.get($resolved, value)) == map {
        @each $attribute, $value in map.get($resolved, value) {
          @include property.set(
            (list.join(map.get($resolved, property), map.get($resolved, attribute) $attribute or ()): $value),
            $important,
            $prefix,
            $separator,
            $type-function,
            $functions,
            $execute,
            $dictionary
          );
        }
      } @else {
        @include property.set(
          (list.join(map.get($resolved, property), map.get($resolved, attribute) or ()): map.get($resolved, value)),
          $important,
          $prefix,
          $separator,
          $type-function,
          $functions,
          $execute,
          $dictionary
        );
      }
    }
  }
}
