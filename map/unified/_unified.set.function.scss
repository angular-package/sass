// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Status: DONE
// The `map.unified-set()` function sets `$allowed` `$value` under `$unified-key` in `$map`.
// @param `$map` A map to set `$value` at `$unified-key`.
// @param `$unified-key` A key under which `$value` is set.
// @param `$value` The value to set in `$map` under `$unified-key`.
// @returns The returned value is updated `$map` with `$value` at `$unified-key`.
@function set($map, $unified-key, $value) {
  @return map.set(
    $map,
    list.append(
      if(meta.type-of($unified-key) == list and list.separator($unified-key) == comma, $unified-key, ($unified-key,)),
      $value,
      comma
    )...
  );
}

// Examples.
// Equivalents.
// @debug map.set((), (test, 1), 2222); // ((test, 1): 2222)
// @debug set((), ((test, 1),), 2222); // ((test, 1): 2222)

// @debug map.set((), test 1, (test, 2), 2222); // (test 1: ((test, 2): 2222))
// @debug set((), (test 1, (test, 2)), 2222); // (test 1: ((test, 2): 2222))

// single type
// @debug set((a: 1, b: 2), test string, 27, string ); // (a: 1, b: 2)
// @debug set((a: 1, b: 2), test number, 27, number); // (a: 1, b: 2, test: (number: 27))
// @debug set((a: 1, b: 2), test map, (map: 22,), map); // (a: 1, b: 2, test: (map: (map: 22)))
// @debug set((a: 1, b: 2), test list, (22, 44), list); // (a: 1, b: 2, test: (list: (22, 44)))
// @debug set((a: 1, b: 2), test color, #ffffff, color); // (a: 1, b: 2, test: (color: #ffffff))
// @debug set((a: 1, b: 2), test null, null, null); // (a: 1, b: 2, test: (null: null))
