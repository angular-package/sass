// Sass.
@use 'sass:list';
@use 'sass:map';

// Status: DONE
// The `map.pick-index()` function picks properties of required `$search-key` and additional `$search-keys` found by `list.index()` function.
// If keys are not found returns `null`.
// @param `$map` A map from which required `$search-key` and additional `$search-keys` found by `list.index()` are picked.
// @param `$search-key` Required key as element of list or list to find by `list.index()` function.
// @arbitrary `$search-keys...` Additional keys as element of list or list to find by `list.index()` function.
// @returns The returned value is a copy of `$map` with required `$search-key` and additional `$search-keys` found by `list.index()` function.
// If keys are found, otherwise `null`.
@function index($map, $search-key, $search-keys...) {
  $result: ();
  @each $search in list.join(($search-key,), $search-keys, comma) {
    @each $key, $value in $map {
      @if list.index($key, $search) {
        $result: map.deep-merge(
          $result,
          ($key: $value)
        );
      }
    }
  }
  @return list.length($result) > 0
    and $result
    or null;
}

// Alias name for `index()`.
@function by-index($map, $search-key, $search-keys...) {
  @return index($map, $search-key, $search-keys...);
}

// Alias name for `index()`.
@function by-list-index($map, $search-key, $search-keys...) {
  @return index($map, $search-key, $search-keys...);
}

// Examples.
// $-theme: (
//   dark: (
//     'dark.palette': (),

//     basic large: (
//       '': border,
//       dark: border dark,
//       light: border light
//     ),
//   ),
//   basic: (
//     '9971test': 1,
//     '2test': 2,
//     '3test': 3,
//     '4test': 4,
//     '5test': 5,

//     'test9971': 1,
//     'test2': 2,
//     'test3': 3,
//     'test4': 4,
//     'test5': 5,

//     'default.palette': (),

//     'palette.gray': (
//       'gray': 'gray' color,
//       'gray' dark: 'gray' dark,
//       'gray' light: 'gray' light
//     ),

//     'gray.palette': (
//       'gray': 'gray' color,
//       'gray' dark: 'gray' dark,
//       'gray' light: 'gray' light
//     ),

//     'bg.palette': (
//       bg: bg color,
//       bg dark: bg dark,
//       bg light: bg light
//     ),

//     basic large: (
//       '': border,
//       dark: border dark,
//       light: border light
//     ),

//     extended small: (
//       '': primary,
//       dark: primary dark,
//       light: primary light
//     ),

//     [primary]: (
//       primary dark: primary dark,
//     ),

//     (key1, key2): (
//       primary: primary1
//     ),

//     key1: primary,

//     // calculation
//     calc(400px + 10%): calculation,
//     calculation: calc(400px + 10%),

//     // bool
//     false: bool,
//     bool: false,

//     // color
//     #fff: color,
//     color: #fff,

//     // function
//     get-function(append): function,
//     function: get-function(append),

//     // map
//     (a: 1, b: 2): map,
//     map: (a: 1, b: 2),

//     // null
//     'null': null,
//     null: 'null',

//     // number
//     15: number,
//     number: 15,

//     // string
//     firstname: string,
//     string: firstname,
//   )
// );

// @debug index(map.get($-theme, basic), small, large); // (small: ("": primary, dark: primary dark, light: primary light), large: ("": border, dark: border dark, light: border light))
// @debug index(map.get($-theme, basic), key1, key2); // (key1: primary, key2: (primary: primary1))
