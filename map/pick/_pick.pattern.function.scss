// Sass.
@use 'sass:list';
@use 'sass:map';

// Functions.
@use '../../list/list.append.function' as list-append;
@use '../../list/remove/remove.nth.function' as list-remove-nth;
@use 'pick.field-type.function' as pick-field-type;
@use 'pick.index.function' as pick-index;
@use 'pick.substring.function' as pick-substring;

// Modules.
@use '../../meta';
@use '../../pattern';
@use '../../string';
@use 'substring';

// Status: DONE
// The `pick.pattern()` function returns a copy of `$map` filtered by using pattern.
// @param `$map` A map from which properties are picked.
// @param `$pattern` A pattern to pick property from `$map`.
// '?=' pick by `list.index()`
// '^' pick by `substring.start()`
// '$' pick by `substring.end()`
// '*' '~=' pick by `pick-substring.substring()`
// 'value:' pick type of value by `pick-field-type.field-type()`
// 'key:' pick type of key by `pick-field-type.field-type()`
// @arbitrary `$patterns...` Additional patterns to pick properties from `$map`.
// @returns The return value is a copy of `$map` with properties associated with patterns.
@function pattern($map, $pattern, $patterns...) {
  $result: ();
  @each $pattern in list-append.append((), $pattern, comma, $patterns...) {
    @if meta.of-type(list string, $pattern) {
      @if pattern.is($pattern, '?=') {
        $result: map.deep-merge(
          $result,
          pick-index.index($map, if(
            meta.type-of($pattern) == string,
            string.slice($pattern, 3),
            #{list-remove-nth.nth($pattern, 1)},
          ))
        );
      } @else if pattern.is($pattern, '^') {
        $result: map.deep-merge($result, substring.start($map, string.slice($pattern, 2)));
      } @else if pattern.is($pattern, '$') {
        $result: map.deep-merge($result, substring.end($map, string.slice($pattern, 2)));
      } @else if pattern.is($pattern, '*', '~=') {
        $result: map.deep-merge(
          $result,
          pick-substring.substring($map, if(
            meta.type-of($pattern) == string,
            string.replace-multiple($pattern, first '*' '', first '~=' ''),
            #{list-remove-nth.nth($pattern, 1)}
          ))
        );
      } @else if pattern.is($pattern, 'value:', 'key:') {
        $result: map.deep-merge($result, pick-field-type.field-type($map, $pattern));
      }
    }
  }
  @return $result;
}

// Alias function name.
@function by-pattern($map, $pattern, $patterns...) {
  @return pattern($map, $pattern, $patterns);
}

// Examples.
$-theme: (
  dark: (
    'dark.palette': (),

    basic large: (
      '': border,
      dark: border dark,
      light: border light
    ),
  ),
  basic: (
    '9971test': 1,
    '2test': 2,
    '3test': 3,
    '4test': 4,
    '5test': 5,

    'test9971': 1,
    'test2': 2,
    'test3': 3,
    'test4': 4,
    'test5': 5,

    'default.palette': (),

    'palette.gray': (
      'gray': 'gray' color,
      'gray' dark: 'gray' dark,
      'gray' light: 'gray' light
    ),

    'gray.palette': (
      'gray': 'gray' color,
      'gray' dark: 'gray' dark,
      'gray' light: 'gray' light
    ),

    'bg.palette': (
      bg: bg color,
      bg dark: bg dark,
      bg light: bg light
    ),

    basic large: (
      '': border,
      dark: border dark,
      light: border light
    ),

    extended small: (
      '': primary,
      dark: primary dark,
      light: primary light
    ),

    [primary]: (
      primary dark: primary dark,
    ),

    (key1, key2): (
      primary: primary1
    ),

    key1: primary,

    // calculation
    calc(400px + 10%): calculation,
    calculation: calc(400px + 10%),

    // bool
    false: bool,
    bool: false,

    // color
    #fff: color,
    color: #fff,

    // function
    get-function(append): function,
    function: get-function(append),

    // map
    (a: 1, b: 2): map,
    map: (a: 1, b: 2),

    // null
    'null': null,
    null: 'null',

    // number
    15: number,
    number: 15,

    // string
    firstname: string,
    string: firstname,
  )
);

// pattern: any
// @debug pattern(map.get($-theme, basic), '*palette');
// @debug pattern(map.get($-theme, basic), '*.palette');
// @debug pattern(map.get($-theme, basic), 'palette.*');

// pattern: key and/or value type
// @debug pattern(map.get($-theme, basic), 'key:list', 'value:string,');
// @debug pattern(map.get($-theme, basic), 'value:string,list');
// @debug pattern(map.get($-theme, basic), 'key:string,list');
// @debug pattern(map.get($-theme, basic), 'key,value:list,string'); // TODO

// @debug pattern(map.get($-theme, basic), '^test');
// @debug pattern(map.get($-theme, basic), '$test');

// pick by `list.index()`
// @debug pattern(map.get($-theme, basic), '?=key1', '?=' key2);

// pick by `string.index()`
// @debug pattern(map.get($-theme, basic), '~=key');
// @debug pattern(map.get($-theme, basic), '~=' key);
