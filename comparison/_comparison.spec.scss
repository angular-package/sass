// Sass.
@use 'sass:map';

// Modules.
@use '../comparison';
@use '../test';

$spec: (
  compare: (
    '===': true,
    '!===': true,
    '==': true,
    '!==': true,
    ':!=': true,
    '~=': true,
    '!~=': true,
    '>': true,
    '!>': true,
    '>=': true,
    '!>=': true,
    '<': true,
    '!<': true,
    '> <': true,
    '!> !<': true,
    '<=': true,
    '!<=': true,
    '(,)': true,
    '(,)==': true,
    '(,)== (,)=': true,
    '(,)>': true,
    '(,)!>': true,
    '(,)!<': true,
    '(,)!<=': true,
    '(:)==': true,
    '(:)!=': true,
    '(:)> (:)<': true,
    '(:)!> (:)!<': true
  ),
  greater: true,
  greater-than: true,
  greater-than-any: true,
  greater-than-every: true,

  less: true,
  less-than: true,
  less-than-any: true,
  less-than-every: true,

  equal: true,
  compare-multiple: true,
);


// SECTION: math.compatible() === 

@include test.to-equal(
  'comparison.compare() === ',
  (
    comparison.compare(27px, '===', 27px),
    comparison.compare(27px, '===', 27em),
    comparison.single(27px, '===', 27em),
  ),
  (
    true, false, false,
  ),
  map.get($spec, compare, '==='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}


// SECTION: NOT math.compatible() !=== 

@include test.to-equal(
  'comparison.compare() !===',
  (
    comparison.compare(27px, '!===', 27px),
    comparison.compare(27px, '!===', 27em),
  ),
  (
    false, true
  ),
  map.get($spec, compare, '!==='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}


// SECTION: NOT equal() == or =

@include test.to-equal(
  'comparison.compare() ==',
  (
    comparison.compare(27, '==', 27),
    comparison.compare('there is a word', '==', 'there is a word'),
    comparison.compare(null, '==', null),
    comparison.compare((a: 2222), '==', ('a': 2222)),
    comparison.compare(true, '==', null),
    comparison.single(27, '==', 27),
    comparison.single(27px, '==', 27em),
  ),
  (
    true, true, true, true, false, true, false
  ),
  map.get($spec, compare, '=='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}


// SECTION: NOT equal() !== or !=

@include test.to-equal(
  'comparison.compare() !==',
  (
    comparison.compare(27, '!==', 27),
    comparison.compare(27px, '!==', 27em),
    comparison.compare('there is a word', '!==', 'there is a word'),
    comparison.compare(null, '!==', null),
    comparison.compare((a: 2222), '!==', ('a': 2222)),
    comparison.compare(true, '!==', null),
  ),
  (
    false, true, false, false, false, true
  ),
  map.get($spec, compare, '!=='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}


// SECTION: meta.type-of() :==

@include test.to-equal(
  'comparison.compare() :==',
  (
    comparison.compare('a', ':==', string),
    comparison.compare(null, ':==', null),
    comparison.compare(false, ':==', bool),
  ),
  (
    true, true, true
  ),
  map.get($spec, compare, ':=='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}


// SECTION: NOT meta.type-of() :!==

@include test.to-equal(
  'comparison.compare() :!==',
  (
    comparison.compare(3, ':!=', string), // true
    comparison.compare(27, ':!==', string) // true
    comparison.compare('a', ':!==', string), // false
    comparison.compare(null, ':!==', null), // false
    comparison.compare(false, ':!==', bool), // false
  ),
  (
    true, true, false, false, false
  ),
  map.get($spec, compare, ':!=='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}


// SECTION: string.index() ~=

@include test.to-equal(
  'comparison.compare() ~=',
  (
    comparison.compare('bold king', '~=', 'bold'), // true
  ),
  (
    true,
  ),
  map.get($spec, compare, '~='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}


// SECTION: NOT string.index() !~=

@include test.to-equal(
  'comparison.compare() !~=',
  (
    comparison.compare('bold king', '!~=', 'world'), // false
    comparison.compare('bold king', '!~=', 'bold'), // false
    comparison.compare('bold ', '!~=', 'bold'), // false
    comparison.single('bold ', '!~=', 'bold'), // false
  ),
  (
    true, false, false, false
  ),
  map.get($spec, compare, '!~='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}


// SECTION: than.greater() >

@include test.to-equal(
  'comparison.compare() >',
  (
    comparison.compare(3, '>', 1), // true
    comparison.compare(3, '>', 5), // false
  ),
  (
    true, false
  ),
  map.get($spec, compare, '>'),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: NOT than.greater() !>

@include test.to-equal(
  'comparison.compare() !>',
  (
    comparison.compare(3, '!>', 1), // false
    comparison.compare(3, '!>', 5), // true
  ),
  (
    false, true
  ),
  map.get($spec, compare, '!>'),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}


// SECTION: than.greater() or equal >=

@include test.to-equal(
  'comparison.compare() >=',
  (
    comparison.compare(3, '>=', 1), // true
    comparison.compare(3, '>=', 3), // true
  ),
  (
    true, true
  ),
  map.get($spec, compare, '>='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: NOT than.greater() or equal !>=

@include test.to-equal(
  'comparison.compare() !>=',
  (
    comparison.compare(3, '!>=', 1), // false
    comparison.compare(3, '!>=', 3), // false
  ),
  (
    false, false,
  ),
  map.get($spec, compare, '!>='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: than.less() <

@include test.to-equal(
  'comparison.compare() > <',
  (
    comparison.compare(3, '<', 1), // false
    comparison.compare(3, '>', 5), // false
  ),
  (
    false, false
  ),
  map.get($spec, compare, '> <'),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: NOT than.less() !<

@include test.to-equal(
  'comparison.compare() !> !<',
  (
    comparison.compare(3, '!<', 1), // true
    comparison.compare(1, '!>', 3), // true
  ),
  (
    true, true
  ),
  map.get($spec, compare, '!> !<'),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: than.less() or equal() <=

@include test.to-equal(
  'comparison.compare() <=',
  (
    comparison.compare(3, '<=', 1), // false
    comparison.compare(3, '<=', 3), // true
  ),
  (
    false, true
  ),
  map.get($spec, compare, '<='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: NOT than.less() or equal() !<=

@include test.to-equal(
  'comparison.compare() !<=',
  (
    comparison.compare(3, '!<=', 1), // true
    comparison.compare(3, '!<=', 3), // false
  ),
  (
    true, false
  ),
  map.get($spec, compare, '!<='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.is-length() (,)

@include test.to-equal(
  'comparison.compare() (,)',
  (
    comparison.compare(('a', 'b', 'c'), '(,)', 3), // true
    comparison.compare(('a', 'b', 'c'), '(,)', 4), // false
  ),
  (
    true, false
  ),
  map.get($spec, compare, '(,)'),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.length() equal() (,)==

@include test.to-equal(
  'comparison.compare() (,)==',
  (
    comparison.compare(('a', 'b', 'c'), '(,)==', 3), // true
    comparison.compare(('a', 'b', 'c'), '(,)==', 13), // false
  ),
  (
    true, false
  ),
  map.get($spec, compare, '(,)=='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.length() NOT equal() (,)!=

@include test.to-equal(
  'comparison.compare() (,)== (,)=',
  (
    comparison.compare(('a', 'b', 'c'), '(,)!=', 3), // false
    comparison.compare(('a', 'b', 'c'), '(,)!=', 13), // true
    comparison.compare(('a', 'b', 'c'), '(,)!==', 3), // false,
    comparison.compare(('a', 'b', 'c'), '(,)!==', 13), // true,
  ),
  (
    false, true, false, true
  ),
  map.get($spec, compare, '(,)== (,)='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.length() and than.greater() (,)>

@include test.to-equal(
  'comparison.compare() (,)>',
  (
    comparison.compare(('a', 'b', 'c'), '(,)>', 2), // true
    comparison.compare(('a', 'b', 'c'), '(,)>', 3), // false
  ),
  (
    true, false,
  ),
  map.get($spec, compare, '(,)>'),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.length() and NOT than.greater() (,)!>

@include test.to-equal(
  'comparison.compare() (,)!>',
  (
    comparison.compare(('a', 'b', 'c'), '(,)!>', 2), // false
    comparison.compare(('a', 'b', 'c'), '(,)!>', 3), // true
  ),
  (
    false, true,
  ),
  map.get($spec, compare, '(,)!>'),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}


// SECTION: list.length() and than.greater() or equal() (,)>=

@include test.to-equal(
  'comparison.compare() (,)>=',
  (
    comparison.compare(('a', 'b', 'c'), '(,)>=', 3), // true
    comparison.compare(('a', 'b', 'c'), '(,)>=', 4), // false
  ),
  (
    true, false,
  ),
  map.get($spec, compare, '(,)>='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.length() and NOT than.greater() or equal() (,)!>=

@include test.to-equal(
  'comparison.compare() (,)!>=',
  (
    comparison.compare(('a', 'b', 'c'), '(,)!>=', 3), // false
    comparison.compare(('a', 'b', 'c'), '(,)!>=', 4), // true
  ),
  (
    false, true,
  ),
  map.get($spec, compare, '(,)!>='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.length() and than.less() (,)<
// @debug compare(('a', 'b', 'c'), '(,)<', 4); // true
// @debug compare(('a', 'b', 'c'), '(,)<', 3); // false

@include test.to-equal(
  'comparison.compare() (,)<',
  (
    comparison.compare(('a', 'b', 'c'), '(,)<', 4), // true
    comparison.compare(('a', 'b', 'c'), '(,)<', 3), // false
  ),
  (
    true, false,
  ),
  map.get($spec, compare, '(,)>='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.length() and NOT than.less() (,)!<

@include test.to-equal(
  'comparison.compare() (,)!<',
  (
    comparison.compare(('a', 'b', 'c'), '(,)!<', 4), // false
    comparison.compare(('a', 'b', 'c'), '(,)!<', 3), // true
  ),
  (
    false, true,
  ),
  map.get($spec, compare, '(,)!<'),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.length() and than.less() or equal() (,)<=

@include test.to-equal(
  'comparison.compare() (,)<=',
  (
    comparison.compare(('a', 'b', 'c'), '(,)<=', 4), // true
    comparison.compare(('a', 'b', 'c'), '(,)<=', 3), // true
  ),
  (
    true, true,
  ),
  map.get($spec, compare, '(,)<='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.length() and NOT than.less() or equal() (,)!<=

@include test.to-equal(
  'comparison.compare() (,)!<=',
  (
    comparison.compare(('a', 'b', 'c'), '(,)!<=', 3), // false
    comparison.compare(('a', 'b', 'c'), '(,)!<=', 2), // true
  ),
  (
    false, true,
  ),
  map.get($spec, compare, '(,)!<='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.length() or equal() (:)==

@include test.to-equal(
  'comparison.compare() (:)==',
  (
    comparison.compare(('a': 1, 'b': 2, 'c': 3), '(:)==', 3), // false
    comparison.compare(('a': 1, 'b': 2, 'c': 3), '(:)==', 4), // true
  ),
  (
    true, false,
  ),
  map.get($spec, compare, '(:)=='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.length() NOT equal() (:)!=

@include test.to-equal(
  'comparison.compare() (:)!=',
  (
    comparison.compare(('a': 1, 'b': 2, 'c': 3), '(:)!=', 3), // false
    comparison.compare(('a': 1, 'b': 2, 'c': 3), '(:)!=', 2), // true
  ),
  (
    false, true,
  ),
  map.get($spec, compare, '(:)!='),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: list.length() than.greater() (:)> than.less() (:)<

@include test.to-equal(
  'comparison.compare() (:)> (:)<',
  (
    comparison.compare(('a': 1, 'b': 2, 'c': 3), '(:)>', 3), // false
    comparison.compare(('a': 1, 'b': 2, 'c': 3), '(:)<', 2), // false
  ),
  (
    false, false,
  ),
  map.get($spec, compare, '(:)> (:)<'),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: NOT list.length() than.greater() (:)!> than.less() (:)!<

@include test.to-equal(
  'comparison.compare() (:)!> (:)!<',
  (
    comparison.compare(('a': 1, 'b': 2, 'c': 3), '(:)!>', 3), // true
    comparison.compare(('a': 1, 'b': 2, 'c': 3), '(:)!<', 3), // true
  ),
  (
    true, true,
  ),
  map.get($spec, compare, '(:)!> (:)!<'),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: comparison.greater()

@include test.to-equal(
  'comparison.greater()',
  (
    comparison.greater(11, 6), // true
    comparison.greater(11, any, 6), // true
    comparison.greater(11, 6, 1, 10), // true
  ),
  (
    true, true, true
  ),
  map.get($spec, greater),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: comparison.greater-than()

@include test.to-equal(
  'comparison.greater-than()',
  (
    comparison.greater-than(11, 6), // true
    comparison.greater-than(11, any, 6), // true
  ),
  (
    true, true
  ),
  map.get($spec, greater-than),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: comparison.greater-than-any()

@include test.to-equal(
  'comparison.greater-than-any()',
  (
    comparison.greater-than-any(11, 6), // true
    comparison.greater-than-any(11, 12, 13, 14, 15, 11), // false
    comparison.greater-than-any(11.1, 12.5, 11.2), // false
    comparison.greater-than-any(11.1, 12.5, 11.0), // true
  ),
  (
    true, false, false, true
  ),
  map.get($spec, greater-than-any),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: comparison.greater-than-every()

@include test.to-equal(
  'comparison.greater-than-every()',
  (
    comparison.greater-than-every(11, 6), // true
    comparison.greater-than-every(11, 6, 5, 10), // true
    comparison.greater-than-every(11.1, 6, 5, 11.1), // false
  ),
  (
    true, true, false
  ),
  map.get($spec, greater-than-every),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: comparison.greater-than-every()

@include test.to-equal(
  'comparison.greater-than-every()',
  (
    comparison.greater-than-every(11, 6), // true
    comparison.greater-than-every(11, 6, 5, 10), // true
    comparison.greater-than-every(11.1, 6, 5, 11.1), // false
  ),
  (
    true, true, false
  ),
  map.get($spec, greater-than-every),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: comparison.less()

@include test.to-equal(
  'comparison.less()',
  (
    comparison.less(11, 6), // false
    comparison.less(11, any, 6), // false
    comparison.less(11, 6, 1, 10), // false
    comparison.less(6, any, 5, 1, 2), // false
    comparison.less(6, 11, 1000, 20px), // true
    comparison.less(6, any, 6, 7, 2000), // true
    comparison.less(6, 100, 200, 250), // true
  ),
  (
    false, false, false, false, true, true, true
  ),
  map.get($spec, less),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: comparison.less-than()

@include test.to-equal(
  'comparison.less-than()',
  (
    comparison.less-than(11, 6), // false
    comparison.less-than(6, 6), // false
    comparison.less-than(11, 10, 9, 8, 11), // false
  ),
  (
    false, false, false
  ),
  map.get($spec, less-than),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: comparison.less-than-any()

@include test.to-equal(
  'comparison.less-than-any()',
  (
    comparison.less-than-any(6, 5, 1, 2), // false
    comparison.less-than-any(6, 5, 1, 2), // false
    comparison.less-than(6, 11, 1000, 20px), // true
    comparison.less-than-any(6, 6, 7, 2000), // true
  ),
  (
    false, false, true, true
  ),
  map.get($spec, less-than-any),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: comparison.less-than-every()

@include test.to-equal(
  'comparison.less-than-every()',
  (
    comparison.less-than-every(11, 6), // false
    comparison.less-than-every(6, 6), // false
    comparison.less-than-every(11, 10, 9, 8, 11), // false
    comparison.less-than-every(6, 100, 200, 250), // true
  ),
  (
    false, false, false, true
  ),
  map.get($spec, less-than-every),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: comparison.equal()

@include test.to-equal(
  'comparison.equal()',
  (
    comparison.equal(6, 6), // true
    comparison.equal(11, 6), // false
    comparison.equal(11, 116), // false
  ),
  (
    true, false, false
  ),
  map.get($spec, equal),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: comparison.compare-multiple()

@include test.to-equal(
  'comparison.compare-multiple()',
  (
    comparison.compare-multiple((value: 27, operator: '==', operand: 27), (value: 17, operator: '==', operand: 27)), // true, false
    comparison.multiple(27 '==' 27, 17 '==' 27, 5 '>' 3), // true, false, true
    comparison.multiple((27, '==', 27), (27, '!=', 27)), // true, false
    comparison.compare-multiple(27 '==' 27, 17 '==' 27, 5 '>' 3), // true, false, true
    comparison.compare-multiple((27, '==', 27), (27, '!=', 27)), // true, false
  ),
  (
    (true, false), (true, false, true), (true, false), (true, false, true), (true, false)
  ),
  map.get($spec, compare-multiple),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

