// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Functions.
@use '../../list/get';
@use '../../list/remove';
@use '../function.get.function';

// Status: DONE
// The `call.arglist()` function calls function of `$name` on `$arglist` with a separator comma where elements are arguments or space where the whole
// list is an argument. Arguments can be passed as list or map by `$arguments` parameter.
// @param `$name` Function name to call arguments from `$arglist` as comma-separated arguments or argument.
// @param `$arglist` List on which to call function of `$name`.
// @param `$prefix` Allowed prefixes of the function name.
// @param `$separator` Allowed separators of the function name.
// @param `$functions` Functions instead of global functions retrieved from `function.$functions`.
// @param `$function` Function name to retrieve from `$functions` if not `null` otherwise from global `function.$functions`.
// @param `$arguments` Additional arguments as `list` or `map` following `$arglist` to pass.
// @returns The returned value is the result of invoked function.
@function arglist(
  $name,
  $arglist,
  $prefix: null,
  $separator: null,
  $functions: null,
  $function: function.get($name, $prefix, $separator, $functions),
  $arguments: null
) {
  @if $name {
    @if $arguments {
      $arglist: if(
        meta.type-of($arguments) == map,
        list.append($arglist, (arguments: $arguments), comma),
        list.join($arglist, $arguments, comma)
      );
    }
    @if list.separator($arglist) == comma {
      @if get.map($arglist) {
        // Map type arguments
        @if map.has-key(get.map($arglist), arguments) or map.has-key(get.map($arglist), args) {
          @return meta.call(
            $function,
            remove.map($arglist)...,
            map.get(get.map($arglist), args) or map.get(get.map($arglist), arguments)...
          );
        }
      }
      @return meta.call($function, $arglist...);
    }
    @return meta.call($function, $arglist);
  }
  @return null;
}
