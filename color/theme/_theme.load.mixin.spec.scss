// Sass.
@use 'sass:list';
@use 'sass:map';

// Modules.
@use '../../color';
@use '../../variant';

// Mixin.
@use 'theme.load.mixin' as *;

// Functions.
@use '../../list/get/get.list.function' as list-get-list;

// TODO: Check dark word.
// Theme.
$-theme: (
  dark: (
    core: ((dark, 15%), light, accent, primary, primary dark, primary light, ),
    ('+gray', +secondary, +primary large): (xs (color, dark, light)),
    (secondary small): (xs (color, dark, light)),
  ),

  dark room: (
    core: ((dark, 15%), light, accent, primary, primary dark, primary light, ),
    ('+gray', +secondary, +primary large): (xs (color, dark, light)),
    (secondary small): (xs (color, dark, light)),
  ),

  (dark theme, light theme): (
    core: ((dark, 15%), light, accent, primary, primary dark, primary light, ),
    ('+gray', +secondary, +primary large): (xs (color, dark, light)),
    (secondary small): (xs (color, dark, light)),
  ),

  basic: (
    // core: (dark, light, accent, [primary [color, dark, light]], [secondary [color, dark, light]]),
    core: ((dark, 15%), light, accent, primary, primary dark, primary light, ),
    // core: (
    //   dark: (dark color, -15%),
    //   light: light color,
    //   accent: accent color,
    //   primary: primary color,
    //   primary dark: primary dark,
    //   primary light: primary light,
    //   secondary: secondary color,
    //   secondary dark: secondary dark,
    //   secondary light: secondary light
    // ),

    basic xs: ((): (primary, primary dark, primary light)),
    (basic lg, premium sm): ((): (primary, primary dark, primary light)),

    // build variant
    ('+gray', +secondary, +primary large): (xs (color, dark, light)),
    (secondary small): (xs (color, dark, light)),
    +accent: (color, dark, light),
    accent: (accent (color, dark, light)),
    // 'gray': (
    //   'gray': 'gray' color,
    //   'gray' dark: 'gray' dark,
    //   'gray' light: 'gray' light
    // ),

    // [bg]: [color, dark, light],
    bg: (
      bg: bg color,
      bg dark: (bg dark, -30%),
      bg light: bg light
    ),

    // [border]: [color, dark, light],
    border: (
      border dark: border dark,
      border light: border light
    ),

    // [link]: [color, dark, light],
    link: (
      link: link color,
      link dark: link dark,
      link light: link light
    ),

    // variant
    (chat, sidebar, footer large): (disabled, error, info, success, warning),
    // control: (disabled, error, info, success, warning),
    control: (
      disabled: disabled color,
      error: error color,
      info: info color,
      success: success color,
      warning: warning color
    ),

    'body.palette': (
      body bg: body bg color,
      body font: body font color
    ),

    'other.palette': (
      code: code color,
      highlight: highlight color
    ),

    'other.colors': (
      code: code color,
      highlight: highlight color
    )

  )
) !default;

// test b: (+primary style ((color a, 5%), (dark b, 1%) (else c, 2%) (), (light d, 2%),),),

//
$-dark-1: (
  dark: (
    // // Core colors variant.
    // core: (dark, light, accent, +primary (color, dark, (lighten, 15%) (darken, 3%) ()), +secondary (color, dark, light)),
    // core: (dark, light, accent, +primary (color, dark, (lighten ':color', 15%) (darken ':background', 3%) ()), +secondary (color, dark, light)),
    core: (dark, light, accent, +primary (color, dark, (lighten, 15%) (darken ':color', 3%) ()), +secondary (color, dark, light)),

    // Multiple colors.
    // multiple: ((primary light ':background') (secondary dark ':color') (),),
    // multiple: ((primary light ':background', 15%) (secondary dark ':color', 1%) (),),
    // multiple: ((primary light ':background', 15%),),

    // // Gray colors.
    // +gray: (color, dark, light),

    // // Bg colors.
    // +bg: ((color, 15%), dark, light),

    // // Border colors.
    // +border: (dark, light),

    // // Link colors.
    // +link: (color, dark, light),

    // // Control colors.
    // control: (
    //   disabled: disabled,
    //   error: error,
    //   info: info,
    //   success: success,
    //   warning: warning
    // ),

    // // Body colors.
    // +body: (bg, font),

    // // Other colors.
    // other: (
    //   code: code,
    //   highlight: highlight
    // )
  )
) !default;

//
$-dark-2: (
  // Core colors variant.
  core: (dark, light, accent, (primary (color, dark, light)), (secondary (color, dark, light))),

  // Gray colors.
  +gray: (color, dark, light),

  // Bg colors.
  +bg: ((color, 15%), dark, light),

  // Border colors.
  +border: (dark, light),

  // Link colors.
  +link: (color, dark, light),

  // Control colors.
  control: (
    disabled: disabled,
    error: error,
    info: info,
    success: success,
    warning: warning
  ),

  // Body colors.
  +body: (bg, font),

  // Other colors.
  other: (
    code: code,
    highlight: highlight
  )
) !default;

// Load theme.
// @include load($-dark-1, false) using($color-scheme, $palette-name, $variant) {
//   @each $class, $colors in $variant {
//     @debug $colors;
//   }

//   @include color.variant-create((background: $variant));
// }

// @include color.variant-create(((basic: border): ((top, bottom): (primary dark: ((background, border) color: primary dark, outline color: accent), secondary: secondary light))));

// @include load($-dark-1, false, dark) using($color-scheme, $palette-name, $variant) {
//   @include color.variant-create((background: $variant));
// }

// @include load($-dark-1, false, (dark, +bg)) using($color-scheme, $palette-name, $variant) {
//   @include color.variant-create((background: $variant));
// }

// @include load($-dark-1, false, (dark, +bg), (dark, +gray)) using($color-scheme, $palette-name, $variant) {
//   @include color.variant-create((background: $variant));
// }

// @include load($-dark-1, false, (dark, (+bg, +gray))) using($color-scheme, $palette-name, $variant) {
//   @include color.variant-create((background: $variant));
// }

// @include load($-dark-2) using($color-scheme, $palette-name, $variant) {
//   @include color.variant-create((background: $variant));
// }
