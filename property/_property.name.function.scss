// Modules.
@use '../list';
@use '../selector';
@use '../string';

// Status: DONE
// The `property.name()` function returns property name or names built from arbitrary `$name`.
// @param `$name` The name for property or multiple properties.
// @returns The return value is a property name or names built from `$name`.
@function name($name...) {
  // Map.
  @if list.length($name) == 1 and type-of(list.nth($name, 1)) == map {
    $-name: ();
    @each $key, $value in list.nth($name, 1) {
      $-name: list.append($-name, $key);
      @if $value {
        @if type-of($value) == map {
          @each $key, $value in $value {
            $-name: list.append($-name, $key, auto, $value);
          }
        } @else {
          $-name: list.append($-name, $value);
        }
      }
    }

    $name: $-name;
  }

  // List.
  @if list.length($name) > 1 {
    $-name: ();
    @each $value in $name {
      $value: if(list.has-list($value) and not (list.separator($value) == comma), selector.nest($value...), $value);
      @if $value {
        $-name: list.append($-name, $value, space);
      }
    }

    $name: $-name;
  } @else {
    $name: list.nth($name, 1);
  }

  $property: if(list.has-list($name) and list.separator($name) == space, selector.nest($name...), selector.nest($name));
  @for $i from 1 through list.length($property) {
    $property: list.set-nth($property, $i, string.unquote(string.join('-', list.nth($property, $i))));
  }
  @return if(list.length($property) == 1, list.nth($property, 1), $property);
}

// Examples.
// property name
// @debug name(padding); // padding

// property name + attribute
// @debug name(padding top); // padding-top

// (property name, property name)
// @debug name((padding, margin)); // padding, margin

// (property + attribute, property + attribute)
// @debug name((padding top, border radius)); // (padding-top, border-radius)

// (property name, property name) attribute
// @debug name((padding, margin) top); // padding-top, margin-top

// @debug name(border block (start, end) color); // border-block-start-color, border-block-ends-color
// @debug name((padding top, margin bottom)); // padding-top, margin-bottom

// (property name, property name) (attribute, attribute)
// @debug name((padding, margin) (top, bottom)); // padding-top, padding-bottom, margin-top, margin-bottom
// @debug name((padding, margin) (top left, bottom right)); // padding-top-left, padding-bottom-right, margin-top-left, margin-bottom-right

// (property name, property name), (attribute, attribute)
// @debug name((padding, margin), (top, bottom)); // padding-top, padding-bottom, margin-top, margin-bottom
// @debug name((padding, margin), (top left, bottom right)); // padding-top-left, padding-bottom-right, margin-top-left, margin-bottom-right

// @debug name(a (padding, margin) b a (top, bottom) c); // a-padding-b-a-top-c, a-padding-b-a-bottom-c, a-margin-b-a-top-c, a-margin-b-a-bottom-c
// @debug name(a (padding, margin) b, a (top, bottom) c); // a-padding-b-a-top-c, a-padding-b-a-bottom-c, a-margin-b-a-top-c, a-margin-b-a-bottom-c

// @debug name(any (padding, margin) left before (top left, bottom right) color); // any-padding-left-before-top-left-color, any-padding-left-before-bottom-right-color, any-margin-left-before-top-left-color, any-margin-left-before-bottom-right-color
// @debug name(any (padding, margin) left, before (top left, bottom right) color); // any-padding-left-before-top-left-color, any-padding-left-before-bottom-right-color, any-margin-left-before-top-left-color, any-margin-left-before-bottom-right-color

// @debug name((padding, margin) (top left, bottom right) (radius, color)); // padding-top-left-radius, padding-top-left-color, padding-bottom-right-radius, padding-bottom-right-color, margin-top-left-radius, margin-top-left-color, margin-bottom-right-radius, margin-bottom-right-color
// @debug name((padding, margin), (top left, bottom right), (radius, color)); // padding-top-left-radius, padding-top-left-color, padding-bottom-right-radius, padding-bottom-right-color, margin-top-left-radius, margin-top-left-color, margin-bottom-right-radius, margin-bottom-right-color

// @debug name(((property1, property2): ((side1, side2): attribute))); // property1-side1-attribute, property1-side2-attribute, property2-side1-attribute, property2-side2-attribute
// @debug name(((property1, property2): ((side1, side2): (attribute1, attribute2)))); // property1-side1-attribute1, property1-side1-attribute2, property1-side2-attribute1, property1-side2-attribute2, property2-side1-attribute1, property2-side1-attribute2, property2-side2-attribute1, property2-side2-attribute2
