// Sass.
@use 'sass:list';

// Variables.
@forward 'dictionary.variables';
@use 'dictionary.variables' as variables;

// Functions.
@use 'dictionary.get.function' as *;
@use 'dictionary.is-global.function' as *;

// Modules.
@use '../../map';

// Status: DONE
// The `dictionary.merge()` function merges global dictionary(if in use) with multiple dictionaries from given `$dictionary` in the `$key`.
// @param `$key` A key under which multiple dictionaries from a given `$dictionary` are being merged.
// @param `$dictionary` Dictionary or multiple dictionaries of map or list type(dictionary key, dictionary key) to merge with a global dictionary(if in use).
// @param `$global` A `bool` value indicating whether to use global dictionary. Default, `null`.
// @return The return value is a dictionary consists of global dictionary(if in use) with multiple dictionaries from the given `$dictionary` of the given `$key`.
@function merge($key: null, $dictionary, $global: null) {
  @if type-of($dictionary) == list {
    $retrieved-dictionary: ();
    @each $dictionary in if(list.separator($dictionary) == comma, $dictionary, ($dictionary,)) {
      $retrieved-dictionary: map.deep-merge($retrieved-dictionary, map.retrieve(pick, $dictionary, ()));
    }

    $dictionary: $retrieved-dictionary;
  }

  $dictionary: if(
    $key,
    map.merge(get($global: $global), list.append($key, $dictionary)...),
    map.deep-merge(get($global: $global), $dictionary)
  );
  @if is-global($global) {
    variables.$dictionary: $dictionary;
  }
  @return $dictionary;
}

// Examples.
// merge an empty map
// @debug merge(null, (), true); //

// get `class` key and merge with an empty map
// @debug merge(class, ()); //

// get `class` key and merge with a map
// @debug merge(class, (test: 1)); //
// @debug merge(class, (class: (prefix: spectre1, suffix: big))); //
// @debug merge(class, ((prefix: second, suffix: big), (prefix: first, suffix: big)));
// @debug merge(class, (prefix: spectre)); //
// @debug merge(class, (prefix: spectre, suffix: big)); //

// get `var` key and merge with a map
// @debug merge(var, (test: 1)); //

// multiple
// @debug merge(class, ((test: 1), (test-5: 5, test-4: 4, test-3: 3), (test-3: test, test-4: test))); //
// @debug merge(class, ((test-1: (test-2: (test-3: (1: 1, 2: 2))))));

// pick multiple dictionaries with the keys
// @debug merge(null, variables.$dictionary-example general);
// @debug merge(null, variables.$dictionary-example ((general, (wrapper, wrap)), (class, calendars),));
// @debug merge(class, (variables.$dictionary-example (general, (class, calendars))));
