// Sass.
@use 'sass:list';

// Variables.
@use 'function.variables' as variables;

// Functions.
@use '../list/remove/remove.nth.function';
@use 'function.is.function';

// Status: DONE
// The `function.remove()` function removes function(existing) name from `$value`.
// @param `$value` Value from which function(existing) name is removed.
// @param `$prefix` Prefix for the function name in `$value`.
// @param `$functions` Additional functions of `map` type to remove from `$value`.
// @returns The return value is `$value` without function name.
@function remove($value, $prefix: variables.$prefix, $functions: variables.$functions) {
  @if type-of($value) == map {
    @each $function, $value in $value {
      @if function.is($function, $prefix, $functions) {
        @return $value;
      }
    }
  } @else if type-of($value) == list {
    @for $i from 1 through list.length($value) {
      @if function.is(list.nth($value, $i), $prefix, $functions) {
        @return remove.nth($value, $i);
      }
    }
  }
  @return $value;
}

// Alias name.
@function remove-from-value($value, $prefix: variables.$prefix, $functions: variables.$functions) {
  @return remove($value, $prefix, $functions);
}

// Examples.
// from list
// @debug remove(selector-nest (unit 2)); // (unit 2)
// @debug remove((unit 2) selector-nest); // (unit 2)
// @debug remove(--color unit 2); // unit 2

// from map
// @debug remove((selector-nest: (unit 2))); // unit 2
// @debug remove((var-get: unit 2)); // unit 2
// @debug remove((--color: unit 2)); // unit 2
// @debug remove((--default: unit 2)); // unit 2

// prefix
// @debug remove(__selector-nest unit 2, __); // unit 2
