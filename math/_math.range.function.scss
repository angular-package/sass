// Functions.
@use '../meta/meta.of-type.function' as meta-of-type;

// Modules.
@use 'range';

// Status: DONE
// The `math.range()` function returns the range of numbers.
// @param `$from` The value of the number type indicates the beginning of the range.
// @param `$to` The value of the number type indicates the end of the range.
// @param `$except` The value of a number or list of numbers not belonging to the range.
// @param `$separator` A separator between the given range numbers.
// @returns The returned value is the list of numbers from the given range.
@function range($from, $to, $step: 1, $except: null, $separator: auto) {
  @return if(
    meta-of-type.of-type(number, $from, $to, $step),
    $from < $to
      and range.up($from, $to, $step, $except, $separator)
      or range.down($from, $to, $step, $except, $separator),
    null
  );
}

// Examples.
// @debug range(15, 20); // 15 16 17 18 19 20
// @debug range(20, 15); // 20 19 18 17 16 15

// step 2
// @debug range(15, 20, 2); // 15 17 19

// to lower step 2
// @debug range(15, -3, 2); // 15 13 11 9 7 5 3 1 -1 -3

// except
// @debug range(15, -3, 1, 0); // 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 -1 -2 -3
// @debug range(15, -3, 1, 0 15 14); // 13 12 11 10 9 8 7 6 5 4 3 2 1 -1 -2 -3

// separator
// @debug range(15, -3, 3, $separator: comma); // 15, 12, 9, 6, 3, 0, -3
