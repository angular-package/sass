// Sass.
@use 'sass:list';
@use 'sass:map';

// Variables.
@use 'function.variables' as variables;

// Functions.
@use 'function.get.function' as *;
@use 'function.is.function' as *;

// Modules.
@use '../meta';
@use '../string';

// Status: DONE
// The `function.pick()` function returns retrieved existing function or its name(in a form `--module-function`) from `$name`.
// @param `$value` Value from which existing function in a form `--module-function` is retrieved.
// @param `$name` A `bool` value indicates whether to return existing `function` or its name.
// @param `$prefix` Prefix to pick function from `$value`. By default, '--'.
// @param `$functions` Additional functions of `map` type to pick from `$value`.
// @returns The return value is an existing `function` or its name of `$name`, if function is not found then an error occurs.
@function pick($value, $name: false, $prefix: variables.$prefix, $functions: meta.$module-functions) {
  @if type-of($value) == list or type-of($value) == map or type-of($value) == string {
    @if type-of($value) == map {
      $value: map.keys($value);
    }
    @for $i from 1 through list.length($value) {
      @if is(list.nth($value, $i), $prefix, $functions) {
        @return if($name == true, list.nth($value, $i), get(list.nth($value, $i), $prefix, $functions));
      }
    }
  }
  @return null;
}

// Examples.
// string
// @debug pick(--list-nth); // get-function("nth")
// @debug pick(--selector-nest); // get-function("nest")

// list
// @debug pick(--selector-nest (padding, margin) top); // get-function("nest")
// @debug pick(--list-nth (padding, margin) 1); // get-function("nth")
// @debug pick((padding, margin) top --selector-nest); // get-function("nest")

// from map
// @debug pick((--selector-nest: unit 2)); // get-function("nest")
// @debug pick((--list-nth: unit 2)); // get-function("nth")

// default
// @debug pick(--wrong-function unit 2);

// error
// @debug pick(--list-wrong);

