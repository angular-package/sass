// Sass.
@use 'sass:list';
@use 'sass:map';

// Variables.
@use 'function.variables' as variables;

// Functions.
@use 'function.is.function' as *;

// Modules.
@use '../meta';
@use '../string';

// Status: DONE
// The `function.has()` function checks whether `$value` contains existing function or from `$functions` in a form `--module-function args...`.
// @param `$value` Value to check against existence function in a form `--module-function args...`.
// @param `$prefix` Prefix of the function in `$value`. By default, '--'.
// @param `$functions` Additional functions of `map` type to check in `$value`.
// @returns The return value is a `bool` indicating whether `$value` contains existing function.
@function has($value, $prefix: variables.$prefix, $functions: meta.$module-functions) {
  @if type-of($value) == list or type-of($value) == map {
    @if type-of($value) == map {
      $value: map.keys($value);
    }
    @each $value in $value {
      @if is($value, $prefix, $functions) {
        @return true;
      }
    }
  }
  @return false;
}

// Examples.
// list
// @debug has(--selector-nest (unit 2)); // true
// @debug has((unit 2) --selector-nest); // true

// map
// @debug has((--selector-nest: (unit 2))); // true

// prefix
// @debug has(__selector-nest (unit 2), __); // true
// @debug has(-_-selector-nest (unit 2), -_-); // true
