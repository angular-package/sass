// Sass.
@use 'sass:map';

// Variables.
@use '../../var/var.variables' as variables;

// Modules.
@use '../../list';
@use '../../math';
@use '../../meta';
@use '../../string';

// Functions.
@use 'name/name.add-indicator.function' as *;
@use 'name/name.adjust.function' as *;
@use 'name/name.create.function' as *;
@use 'name/name.retrieve.function' as *;

// Status: DONE
// The `color.name()` function returns color name of `list` type built from `$name` and `$type` ready for translation.
// It's designed to add word `color` to the name in a proper place, and split name of `string` type with delimiter into `list`.
// @param `$name` Color name of `string` or `list` type. String type is being split by `$delimiter`.
// @param `$type` Color type e.g. `hue`, `alpha`, `saturation`, `lightness`, `rgb`.
// @param `$delimiter` Delimiter to split `$name` and `$type` of `string` type into `list`.
// @param `$hue` Add hue adjustment.
// @param `$saturation` Add saturation adjustment.
// @param `$lightness` Add lightness adjustment.
// @param `$alpha` Add alpha adjustment.
// @param `$shade` (dark, light)
// @param `$separator` Separator space/comma for color name with adjustment.
// @returns The returned value is a color name of `list` type in format `[name][delimiter][color][delimiter][shade][delimiter][type]`.
@function name(
  $name,
  $type: null,
  $delimiter: map.get(variables.$var, delimiter),
  $hue: null,
  $saturation: null,
  $lightness: null,
  $alpha: null,
  $shade: (dark, light),
  $separator: list.separator($name)
) {
  // Retrieve adjustment.
  $adjustment: retrieve($name);

  // Set color name from `$adjustment`.
  $name: map.get($adjustment, name);

  // Create.
  $name: create($name, $type, $delimiter, $shade);

  // Adjust and return.
  @return adjust(
    $name,
    $adjustment,
    $hue,
    $saturation,
    $lightness,
    $alpha,
    $separator,
  );
}

// Examples.
$-delimiter: '-';

// INFO: Name form.
// (color name) lightness
// (primary dark) 15%

// (color name) lightness alpha
// (primary dark) 15% 0.1

// (color name) hue lightness alpha
// (primary dark) 15deg 15% 0.1

// (color name) hue saturation lightness alpha
// (primary dark) 15deg 5% 15% 0.1

// (color name, lightness)
// (primary dark, 15%)

// (color name, lightness, alpha)
// (primary dark, 15%, 0.1)

// (color name, hue, lightness, alpha)
// (primary dark, 15deg, 15%, 0.1)

// (color name, hue, saturation, lightness, alpha)
// (primary dark, 15deg, 5%, 15%, 0.1)

// string
// @debug name(color, $delimiter: $-delimiter); // color
// @debug name("color", $delimiter: $-delimiter); // color

// @debug name(dark, $delimiter: $-delimiter); // dark color
// @debug name(light, $delimiter: $-delimiter); // light color
// @debug name(dark-color, $delimiter: $-delimiter); // dark color
// @debug name('gray', $delimiter: $-delimiter); // gray color
// @debug name(primary, $delimiter: $-delimiter); // primary color

// color
// @debug name(gray); // gray color
// @debug name(orange); // orange color

// string + shade in string
// @debug name(primary-dark, $delimiter: '--'); // primary-dark color
// @debug name(primary-dark, $delimiter: $-delimiter); // primary color dark
// @debug name(primary-color-dark, $delimiter: $-delimiter); // primary color dark
// @debug name(primary-light, $delimiter: $-delimiter); // primary color light
// @debug name(primary-dark, hue, $-delimiter); // primary color dark hue
// @debug name(primary-dark-color, $delimiter: $-delimiter); // primary dark color

// list
// @debug name(dark color, $delimiter: $-delimiter); // dark color
// @debug name(primary hue, $delimiter: $-delimiter); // primary hue color
// @debug name(primary hue light, alpha, $delimiter: $-delimiter); // primary hue color light alpha

// list + dark/light
// @debug name(primary dark, $delimiter: $-delimiter) ; // primary color dark
// @debug name(primary light, $delimiter: $-delimiter); // primary color light
// @debug name(primary basic light, $delimiter: $-delimiter); // primary basic color light

// list + dark/light + type
// @debug name(primary light, hue, $-delimiter); // primary color light hue
// @debug name(primary basic light, alpha, $-delimiter); // primary basic color light alpha
// @debug name(primary basic light dark, alpha, $-delimiter); // primary basic light color dark alpha
// @debug name(primary basic light dark, contrast-saturation, $-delimiter); // primary basic light color dark alpha contrast saturation

// Add lightness
// @debug name(primary basic light dark, contrast saturation, $-delimiter, $lightness: 15%); //

// Add lightness and alpha
// @debug name(primary basic light dark, contrast saturation, $-delimiter, $lightness: 15%, $alpha: 0.5); //

// Add hue, saturation, lightness and alpha
// @debug name(primary basic dark, null, $-delimiter, $hue: 20deg, $saturation: 5%, $lightness: 15%, $alpha: 0.5); //
// @debug name(primary basic dark light, null, $-delimiter, $hue: 20deg, $saturation: 5%, $lightness: 15%, $alpha: 0.5); //

// Adjustments.
// lightness
// @debug name((primary basic dark, 15%));
// @debug name((primary basic dark) 15%);

// lightness + alpha
// @debug name((primary basic dark, 15%));
// @debug name((primary basic dark) 15% 0.1);

// hue + saturation + lightness + alpha
// @debug name((primary basic dark, 15deg, 1%, 5%, 0.1));
// @debug name((primary basic dark) 15deg 1% 5% 0.1);

// @debug name((primary basic dark, 15deg, 1%, 5%, 0.1), $hue: 20deg, $saturation: 5%, $lightness: 15%, $alpha: 0.5);
// @debug name((primary basic dark) 15deg 1% 5% 0.1, $hue: 20deg, $saturation: 5%, $lightness: 15%, $alpha: 0.5);

//
// @debug name((primary basic dark, 5%), null, $-delimiter, $hue: 20deg, $saturation: 5%, $lightness: 15%, $alpha: 0.5); // primary basic color dark, 20deg, 5%, 20%, 0.5
// @debug name((primary basic dark, 5%), null, $-delimiter, $hue: 20deg, $saturation: 5%, $lightness: 15%, $alpha: 0.5, $separator: space); // (primary basic color dark) 20deg 5% 20% 0.5
