// Sass.
@use 'sass:list';
@use 'sass:map';

// Modules.
@use '../function';
@use '../meta';
@use '../property';
@use '../selector';
@use '../var';
@use '../variant';

function.$functions: map.merge(function.$functions, (
  selector: meta.module-functions(selector),
  var: meta.module-functions(var)
));

property.$type-function: map.merge(property.$type-function, (list: --var-get));

// FEATURE: Variant 1
// (class + property: value)
// @include property.variant(( border: 1px solid red ));
// .border {
//   border: 1px solid red;
// }

// @include property.variant(( padding: 10px, margin: 20px ));
// .padding {
//   padding: 10px;
// }
// .margin {
//   margin: 20px;
// }

// FEATURE: Variant 1 + add 'middle' property
// @include property.variant(( +top: 1px solid red ), $modifier: (class: (prefix: border), property: (base: border)));
// .border-top {
//   border-top: 1px solid red;
// }

// @include property.variant(( +top: 1px solid red, +bottom: 2px solid blue ), $modifier: (class: (prefix: border), property: (base: border)));
// .border-top {
//   border-top: 1px solid red;
// }
// .border-bottom {
//   border-bottom: 2px solid blue;
// }

// @include property.variant(((+top left, bottom right): 1px solid red), $modifier: (class: (prefix: border), property: (base: border, attribute: color)));
// .border-top-left {
//   border-top-left-color: 1px solid red;
// }
// .border-bottom-right {
//   border-color: 1px solid red;
// }

// @include property.variant(((+top left, +bottom right): 1px solid red), $modifier: (class: (prefix: border), property: (base: border, attribute: color)));
// .border-top-left {
//   border-top-left-color: 1px solid red;
// }
// .border-bottom-right {
//   border-bottom-right-color: 1px solid red;
// }

// @include property.variant(('+' (top, bottom): 1px solid red ), $modifier: (class: (prefix: border), property: (base: border)));
// .border-top, .border-bottom {
//   border-top: 1px solid red;
//   border-bottom: 1px solid red;
// }










// @include property.variant(( border top: 1px solid red ));
// .border-top {
//   border-top: 1px solid red;
// }

// @include property.variant(( border bottom: 1px solid blue ));
// .border-bottom {
//   border-bottom: 1px solid blue;
// }

// @include property.variant(( padding top: 10px, margin top: 20px ));
// .padding-top {
//   padding-top: 10px;
// }
// .margin-top {
//   margin-top: 20px;
// }

// @include property.variant(( (border, outline): 1px solid red ));
// .border {
//   border: 1px solid red;
// }
// .outline {
//   outline: 1px solid red;
// }

// @include property.variant(( (border, outline): 1px solid red, (padding, margin): unit 3));
// .border {
//   border: 1px solid red;
// }
// .outline {
//   outline: 1px solid red;
// }
// .padding {
//   padding: unit 3;
// }
// .margin {
//   margin: unit 3;
// }


// @include property.variant(( (border, outline) (top, bottom): 1px solid red ));
// .border-top, .border-bottom, .outline-top, .outline-bottom {
//   border-top: 1px solid red;
//   border-bottom: 1px solid red;
//   outline-top: 1px solid red;
//   outline-bottom: 1px solid red;
// }

// --- here
// @include property.variant(( (border top, outline bottom): 1px solid red ));
// .border-top {
//   border-top: 1px solid red;
// }
// .outline-bottom {
//   outline-bottom: 1px solid red;
// }

// @include property.variant(( border (top, bottom) color: 1px solid red ));
// .border-top-color, .border-bottom-color {
//   border-top-color: 1px solid red;
//   border-bottom-color: 1px solid red;
// }

// @include property.variant(( (border (top, bottom) color, outline (top, bottom) color): 1px solid red ));
// .border-top-color, .border-bottom-color {
//   border-top-color: 1px solid red;
//   border-bottom-color: 1px solid red;
// }
// .outline-top-color, .outline-bottom-color {
//   outline-top-color: 1px solid red;
//   outline-bottom-color: 1px solid red;
// }

// @include property.variant(( ((border, outline): color): 1px solid red ));
// .border {
//   color: 1px solid red;
// }
// .outline {
//   color: 1px solid red;
// }

// @include property.variant(( ((border, outline): color): red ));
// .border {
//   color: red;
// }
// .outline {
//   color: red;
// }

// @include property.variant(( ((border top, outline bottom): (background, color)): red ));
// .border-top {
//   background: red;
//   color: red;
// }
// .outline-bottom {
//   background: red;
//   color: red;
// }

// @include property.variant(( ((border color, outline color): (border color, outline color)): red ));
// .border-color {
//   border-color: red;
//   outline-color: red;
// }
// .outline-color {
//   border-color: red;
//   outline-color: red;
// }

// @include property.variant(( ((border color, outline color): border (top, bottom) color): red ));
// .border-color {
//   border-top-color: red;
//   border-bottom-color: red;
// }
// .outline-color {
//   border-top-color: red;
//   border-bottom-color: red;
// }

// @include property.variant(( ((border color, outline color): border (top, bottom) color): (red, blue) ));
// .border-color {
//   border-top-color: red;
//   border-bottom-color: red;
// }
// .outline-color {
//   border-top-color: red;
//   border-bottom-color: red;
// }
// .border-color {
//   border-top-color: blue;
//   border-bottom-color: blue;
// }
// .outline-color {
//   border-top-color: blue;
//   border-bottom-color: blue;
// }

// @include property.variant(( ((border color, outline color): border (top, bottom) color): (red, blue) ));
// .border-color {
//   border-top-color: red;
//   border-bottom-color: red;
// }
// .outline-color {
//   border-top-color: red;
//   border-bottom-color: red;
// }
// .border-color {
//   border-top-color: blue;
//   border-bottom-color: blue;
// }
// .outline-color {
//   border-top-color: blue;
//   border-bottom-color: blue;
// }


// FEATURE: Variant 2
// (class + property: (class: value))
// @include property.variant((border: ((): 1px solid red)));
// .border {
//   border: 1px solid red;
// }

// @include property.variant((border: (top: 1px solid red)));
// .border-top {
//   border: 1px solid red;
// }

// @include property.variant((border: ((top, bottom): 1px solid red)));
// .border-top {
//   border: 1px solid red;
// }
// .border-bottom {
//   border: 1px solid red;
// }

// @include property.variant(((margin, padding): ((top, bottom): unit 5)));

// @include property.variant(((margin, padding): ((top, bottom): unit 5)));




// ---

// @include property.variant(
//   // (class + property: value)
//   (
//     // border: 1px solid red,
//     // border top: 1px solid red,
//     // border bottom: 1px solid blue,

//     // (border, outline): 1px solid red,
//     // (border top, outline bottom): 1px solid red,

//     // (border, outline) color: 1px solid red,
//     // border (top, bottom) color: 1px solid red,
//     // (border (top, bottom) color, outline (top, bottom) color): 1px solid red,

//     ((border, outline): color): 1px solid red,
//   ),

//   // (border top: 1px solid red),

//   // (top right: primary dark, medium: medium, small: small),

//   // ((small, medium, large): 20px),

//   // ((primary y red: (border top, outline bottom) color): 1px solid red),
//   // ((primary y red: (border top, outline bottom)): 1px solid red),


//   // (top: (large: 10px solid red, small: 2px solid red, medium: 5px solid red)),
//   // (border: (top: (primary dark: primary dark, secondary light: secondary light, accent: accent))),
//   // ((border, outline): (((top, bottom): color): (primary: primary dark, secondary: secondary light, accent: accent))),
//   // (
//   //   // + top: primary dark,
//   //   // + top: primary dark,
//   //   // + top color: primary dark,
//   //   // + top: medium, // FEATURE: + adds middle to property name if `base` set.
//   //   // small: small,
//   //   // + top color: (large: 10px solid red, small: 2px solid red, medium: 5px solid red),
//   //   // border: (top: (primary dark: primary dark, secondary light: secondary light, accent: accent)),

//   // ),

//   // important
//   $important: false,

//   // $pseudo-class,
//   $dictionary: (),
//   // $class-function: meta.get-function(class),

//   // // function
//   // $prefix,
//   // $separator,
//   // $type-function: (list: --var-var),
//   // $functions: (var: (var: meta.get-function(var, false, var))),
//   // $modifier: (class: (attribute: width), property: (base: border, attribute: width))
//   // $modifier: (
//   //   // property: (base: border),
//   //   // property: (base: border, middle: color),
//   //   class: (prefix: null, attribute: null), property: (base: border, middle: null, attribute: null),
//   //   // 1: (class: (prefix: border), property: (base: border, attribute: color)), // Modify variant 1
//   //   // // 1: (class: (prefix: border), property: (base: border)),
//   //   // 2: (class: (prefix: border), property: (pre-base: border)),  // Modify variant 2
//   //   // 3: (class: (prefix: null, attribute: color), property: (attribute: color)),  // Modify variant 3
//   // )
// );


// @include width(((): (large: large, small: small, medium: medium)));
// @include property.variant((primary: primary dark), /*$modifier: (property: (base: border, middle: null))*/);

// @include property.variant((
//   (test1, test2): (
//     (top, bottom, left): (
//       large: 20px,
//       small: 10px,
//     )
//   )
// ), $modifier: (property: (attribute: color)));


// @include property.variant((
//   (border, outline): (
//     (top right, right bottom): (
//         // color: (
//         //   primary dark: primary dark,
//         //   secondary light: secondary dark,
//         // ),
//         secondary dark: (color: secondary dark),
//         primary dark: (color: primary dark),
//       )
//     )
//   )
// );

// @include property.variant((
//   border: (
//     (top left, bottom left): (
//       (): (
//         radius: 20px,
//         color: red
//       )
//     )
//   )
// ));

// @include property.variant((
//   border: (
//     (top left, bottom left): (
//       // radius: (
//       //   large: 20px,
//       //   small: 10px,
//       // ),
//       radius large: 20px,
//       radius small: 10px,
//     )
//   )
// ));


// @include property.variant((
//   border: (
//     (top, right, bottom, left): (
//       radius 1: (
//         large: 20px,
//         small: 10px,
//       )
//     ))
//   ),
//   // $modifier: (property: (name: border))
// );


// Examples.
// FEATURE: single variant: (property/class: class/value)
// @include property.variant((float: right)); // TODO: use `variant.create()`
// @include property.variant((float: (right: right)));
// .float-right {
//   float: right;
// }

// FEATURE: single variant: (property/class: class/value + important)
// @include property.variant((float: right !important));
// @include property.variant((float: (right: right !important)));
// .float-right {
//   float: right !important;
// }

// FEATURE: single variant: (property/class: class/value, property/class: class/value) + important + pseudo-class
// @include property.variant((float: right), true, (':hover', ':visited')); // TODO: use `variant.create()`
// @include property.variant((float: (right: right)), true, (':hover', ':visited'));
// .float-right:hover, .float-right:visited {
//   float: right !important;
// }

// FEATURE: single variant: (property/class: class/value, property/class: class/value) + important + pseudo-class + dictionary
// @include property.variant((float: right), true, (':hover', ':visited'), (float: f, right: r)); // TODO: use `variant.create()`
// @include property.variant((float: (right: right)), true, (':hover', ':visited'), (float: f, right: r));
// .f-r:hover, .f-r:visited {
//   float: right !important;
// }

// FEATURE: single variant: (property/class: class/value + adjust + important, property/class: class/value)
// @include property.variant((float: --var-get (right, ('+' 15)) !important)); // TODO: use `variant.create()`
// @include property.variant((float: (right: --var-get (right, ('+' 15)) !important)));
// .float-right {
//   float: calc(var(--s-right) + 15) !important;
// }

// FEATURE: multiple variants: (property/class: class/value + important, property/class: class/value)
// @include property.variant((float: right '!important', text align: left)); // TODO: use `variant.create()`
// @include property.variant((float: (right: right !important), text align: (left: left)));
// .float-right {
//   float: right !important;
// }
// .text-align-left {
//   text-align: left;
// }

// FEATURE: multiple variants: (property/class: class/value, class/value)
// @include property.variant((float: variant.create((right, left)))); // TODO: use `variant.create()`
// @include property.variant((float: (right: right, left: left)));
// .float-right {
//   float: right;
// }
// .float-left {
//   float: left;
// }

// FEATURE: multiple variants: (property/class: class/value, class/value + important)
// @include property.variant((float: variant.create((right, left !important)))); // TODO: use `variant.create()`
// @include property.variant((float: (right: right, left: left !important)));
// .float-right {
//   float: right;
// }
// .float-left {
//   float: left !important;
// }

// FEATURE: multiple variants: ((property/class, property/class): (class/value, class/value)) + important + pseudo-class
// @include property.variant(((float, text align): variant.create((right, left))), true, (':hover', ':visited')); // TODO: use `variant.create()`
// @include property.variant(((float, text align): (right: right, left: left)), true, (':hover', ':visited'));
// .float-right:hover, .float-right:visited {
//   float: right !important;
// }
// .text-align-right:hover, .text-align-right:visited {
//   text-align: right !important;
// }
// .float-left:hover, .float-left:visited {
//   float: left !important;
// }
// .text-align-left:hover, .text-align-left:visited {
//   text-align: left !important;
// }

// FEATURE: multiple variants: ((property/class, property/class): (class/value, class/value)) + important + pseudo-class + dictionary
// @include property.variant(((float, text align): variant.create((right, left))), true, ':hover', (float: f)); // TODO: use `variant.create()`
// @include property.variant(((float, text align): (right: right, left: left)), true, ':hover', (float: f));
// .f-right:hover {
//   float: right !important;
// }
// .text-align-right:hover {
//   text-align: right !important;
// }
// .f-left:hover {
//   float: left !important;
// }
// .text-align-left:hover {
//   text-align: left !important;
// }

// FEATURE: multiple variants: ((property/class,): (class/value, class/value + important))
// @include property.variant(((position,): variant.create((absolute, fixed, relative !important, sticky !important))));
// @include property.variant(((position,): (absolute: absolute, fixed: fixed, relative: relative !important, sticky: sticky !important)));
// .position-absolute {
//   position: absolute;
// }
// .position-fixed {
//   position: fixed;
// }
// .position-relative {
//   position: relative !important;
// }
// .position-sticky {
//   position: sticky !important;
// }

// @include property.variant(((position,): variant.create((absolute !important, fixed, relative, sticky)))); // TODO: use `variant.create()`
// @include property.variant(((position,): (absolute: absolute !important, fixed: fixed, relative: relative, sticky: sticky)));
// .position-absolute {
//   position: absolute !important;
// }
// .position-fixed {
//   position: fixed;
// }
// .position-relative {
//   position: relative;
// }
// .position-sticky {
//   position: sticky;
// }

// @include property.variant(( flex direction: variant.create((column, row)) )); // TODO: use `variant.create()`
// @include property.variant(( flex direction: ( column: column, row: row ) ));
// .flex-direction-column {
//   flex-direction: column;
// }
// .flex-direction-row {
//   flex-direction: row;
// }

// FEATURE: multiple variants: (property/class: (class: value , class: value))
// @include property.variant((align items: (center: center, start: flex-start, end: flex-end))); // TODO: use `variant.create()`
// .align-items-center {
//   align-items: center;
// }
// .align-items-start {
//   align-items: flex-start;
// }
// .align-items-end {
//   align-items: flex-end;
// }

// FEATURE: multiple variants: (class/value, (class: value), class/value)
// justify content
// @include property.variant((
//   justify content: (
//     // .justify-content-center,
//     center,

//     // .justify-content-end,
//     (end: flex-end),

//     // .justify-content-space-around,
//     space-around,

//     // .justify-content-space-around,
//     space-between,

//     // .justify-content-space-evenly,
//     space-evenly,

//     // .justify-content-start,
//     (start: flex-start)
//   )
// ));
// .justify-content-center {
//   justify-content: center;
// }
// .justify-content-end {
//   justify-content: flex-end;
// }
// .justify-content-space-around {
//   justify-content: space-around;
// }
// .justify-content-space-between {
//   justify-content: space-between;
// }
// .justify-content-space-evenly {
//   justify-content: space-evenly;
// }
// .justify-content-start {
//   justify-content: flex-start;
// }

// FEATURE: variant: (class/property, (class: value))
// @include property.variant((border: (2: unit 2)));
// .border-2 {
//   border: unit 2;
// }

// @include property.variant((border: (2: (unit 2) ())));
// @include property.variant((border: (2: --var-get (unit 2))));
// .border-2 {
//   border: var(--s-unit-2);
// }

// FEATURE: variant: (class/property, (class: value, variant))
// @include property.variant((border: (1: unit 1, 2: unit 2)));
// .border-1 {
//   border: unit 1;
// }
// .border-2 {
//   border: unit 2;
// }

// @include property.variant((border: (1: (unit 1) (unit 2), 2: --var-get (unit 2))));
// .border-1 {
//   border: var(--s-unit-1) var(--s-unit-2);
// }
// .border-2 {
//   border: var(--s-unit-2);
// }

// @include property.variant((border: (unit 1: --var-get (unit 1) '!important', unit 2: --var-get (unit 2))));
// @include property.variant((border: (unit 1: (unit 1) '!important', unit 2: --var-get (unit 2))));
// .border {
//   border: var(--s-unit-1) !important;
// }
// .border {
//   border: var(--s-unit-2);
// }

// @include property.variant((border: (unit 1: --var-get (unit 1))), true);
// .border-unit-1 {
//   border: var(--s-unit-1) !important;
// }

// @include property.variant((border: (one 1: --var-get (unit 1), two 2: --var-get (unit 2))));
// .border-one-1 {
//   border: var(--s-unit-1);
// }
// .border-two-2 {
//   border: var(--s-unit-2);
// }

// FEATURE: (class/property: (property/class: (class: value, variant)))
// @include property.variant((border: (radius: (1: --var-get (unit 1), 2: --var-get (unit 2) !important))));
// .border-radius-1 {
//   border-radius: var(--s-unit-1);
// }
// .border-radius-2 {
//   border-radius: var(--s-unit-2) !important;
// }

// FEATURE: (class/property: (property/class: (class: value, variant)))
// @include property.variant((border: ((radius, color): (1: unit 1, two: unit 2))));
// .border-radius-1 {
//   border-radius: unit 1;
// }
// .border-radius-two {
//   border-radius: unit 2;
// }
// .border-color-1 {
//   border-color: unit 1;
// }
// .border-color-two {
//   border-color: unit 2;
// }

// FEATURE: (class/property: ((property/class): ((class): value, variant)))
// @include property.variant((font: (size: ((xxs, xs, sm, md, lg, xl, xxl): --var-get (unit 1), two: --var-get (unit 2)))));
// .font-size-xxs, .font-size-xs, .font-size-sm, .font-size-md, .font-size-lg, .font-size-xl, .font-size-xxl {
//   font-size: var(--s-unit-1);
// }
// .font-size-two {
//   font-size: var(--s-unit-2);
// }

// @include property.variant((border: (radius: (1: --var-get (unit 1), two: --var-get (unit 2)))));
// .border-radius-1 {
//   border-radius: var(--s-unit-1);
// }
// .border-radius-two {
//   border-radius: var(--s-unit-2);
// }

// @include property.variant((border: (top: (1: --var-get (unit 1)))));
// .border-top-1 {
//   border-top: var(--s-unit-1) !important;
// }

// @include property.variant((border: ((top left, right bottom): (1: --var-get (unit 1)))));
// .border-top-left-1 {
//   border-top-left: var(--s-unit-1) !important;
// }
// .border-right-bottom-1 {
//   border-right-bottom: var(--s-unit-1) !important;
// }

// @include property.variant((border: (((top, bottom): color): (1: --var-get (unit 1), 3: --var-get (unit 3)))));
// @include property.variant((border: (--selector-nest ((top, bottom), color): (1: --var-get (unit 1), 3: --var-get (unit 3)))));
// .border-top-color-1 {
//   border-top-color: var(--s-unit-1);
// }
// .border-top-color-3 {
//   border-top-color: var(--s-unit-3);
// }
// .border-bottom-color-1 {
//   border-bottom-color: var(--s-unit-1);
// }
// .border-bottom-color-3 {
//   border-bottom-color: var(--s-unit-3);
// }

// @include property.variant(((border, margin): ((top left, right bottom): (1: --var-get (unit 1), two: --var-get (unit 2)))));
// .border-top-left-1 {
//   border-top-left: var(--s-unit-1);
// }
// .border-top-left-two {
//   border-top-left: var(--s-unit-2);
// }
// .border-right-bottom-1 {
//   border-right-bottom: var(--s-unit-1);
// }
// .border-right-bottom-two {
//   border-right-bottom: var(--s-unit-2);
// }
// .margin-top-left-1 {
//   margin-top-left: var(--s-unit-1);
// }
// .margin-top-left-two {
//   margin-top-left: var(--s-unit-2);
// }
// .margin-right-bottom-1 {
//   margin-right-bottom: var(--s-unit-1);
// }
// .margin-right-bottom-two {
//   margin-right-bottom: var(--s-unit-2);
// }

// @include property.variant((padding: ((): ((xl, xs, sm): --var-get (unit 1), 2: --var-get (unit 2)))));
// .padding-xl, .padding-xs, .padding-sm {
//   padding: var(--s-unit-1);
// }
// .padding-2 {
//   padding: var(--s-unit-2);
// }

// multiple properties + single variant + single side
// @include property.variant(((margin, padding): (top: (1: --var-get (unit 1)))));
// .margin-top-1 {
//   margin-top: var(--s-unit-1);
// }
// .padding-top-1 {
//   padding-top: var(--s-unit-1);
// }

// multiple properties + single variant + multiple sides
// @include property.variant(((margin, padding): ((top, bottom): (1: --var-get (unit 1)))));
// .margin-top-1 {
//   margin-top: var(--s-unit-1);
// }
// .margin-bottom-1 {
//   margin-bottom: var(--s-unit-1);
// }
// .padding-top-1 {
//   padding-top: var(--s-unit-1);
// }
// .padding-bottom-1 {
//   padding-bottom: var(--s-unit-1);
// }

// multiple properties + multiple variants + multiple sides
// @include property.variant(((margin, padding): ((top, bottom): (1: --var-get (unit 1), 3: --var-get (unit 3)))));
// .margin-top-1 {
//   margin-top: var(--s-unit-1);
// }
// .margin-top-3 {
//   margin-top: var(--s-unit-3);
// }
// .margin-bottom-1 {
//   margin-bottom: var(--s-unit-1);
// }
// .margin-bottom-3 {
//   margin-bottom: var(--s-unit-3);
// }
// .padding-top-1 {
//   padding-top: var(--s-unit-1);
// }
// .padding-top-3 {
//   padding-top: var(--s-unit-3);
// }
// .padding-bottom-1 {
//   padding-bottom: var(--s-unit-1);
// }
// .padding-bottom-3 {
//   padding-bottom: var(--s-unit-3);
// }

// FEATURE: (class/property: ((class/property, class/property): (class/property: value, class/property: value)))
// @include property.variant((
//   (outline border): (
//     (top-left, bottom-right): (
//       radius: 30px,
//       color: --var-get (primary color dark)
//     ),
//   )), $dictionary: (radius: r));
// .outline-border-top-left-r {
//   outline-border-top-left: 30px;
// }
// .outline-border-top-left-color {
//   outline-border-top-left: var(--s-primary-color-dark);
// }
// .outline-border-bottom-right-r {
//   outline-border-bottom-right: 30px;
// }
// .outline-border-bottom-right-color {
//   outline-border-bottom-right: var(--s-primary-color-dark);
// }

// FEATURE: (class/property: ((class/property, class/property): (class: (property: value, property: value))))
// @include property.variant((
//   border: (
//     (top left, bottom left): (
//       1: (
//         radius: 20px,
//         color: red
//       )
//     )
//   )
// ));
// .border-top-left-1 {
//   border-top-left-radius: 20px;
//   border-top-left-color: red;
// }
// .border-bottom-left-1 {
//   border-bottom-left-radius: 20px;
//   border-bottom-left-color: red;
// }

// dictionary
// @include property.variant(((margin, padding): ((top, bottom): (1: --var-get (unit 1), 3: --var-get (unit 3)))), false, ':hover', (margin: m, padding: p));
// .m-top-1:hover {
//   margin-top: var(--s-unit-1);
// }
// .m-top-3:hover {
//   margin-top: var(--s-unit-3);
// }
// .m-bottom-1:hover {
//   margin-bottom: var(--s-unit-1);
// }
// .m-bottom-3:hover {
//   margin-bottom: var(--s-unit-3);
// }
// .p-top-1:hover {
//   padding-top: var(--s-unit-1);
// }
// .p-top-3:hover {
//   padding-top: var(--s-unit-3);
// }
// .p-bottom-1:hover {
//   padding-bottom: var(--s-unit-1);
// }
// .p-bottom-3:hover {
//   padding-bottom: var(--s-unit-3);
// }

// Variant.
// @include property.variant((
//   border: (
//     (top-left, bottom-right): (
//       radius: (radius: 5%),
//     )
//   ),
//   scroll: (
//     ((margin, padding): block): (
//       start 5: (start: 5%),
//       end 10: (end: 10%),
//     )
//   )
// ));
// .border-top-left-radius {
//   border-top-left-radius: 5%;
// }
// .border-bottom-right-radius {
//   border-bottom-right-radius: 5%;
// }
// .scroll-margin-block-start-5 {
//   scroll-margin-block-start: 5%;
// }
// .scroll-margin-block-end-10 {
//   scroll-margin-block-end: 10%;
// }
// .scroll-padding-block-start-5 {
//   scroll-padding-block-start: 5%;
// }
// .scroll-padding-block-end-10 {
//   scroll-padding-block-end: 10%;
// }

// dictionary
// @include property.variant(
//   (z-index: (aaa: (primary dark) a)),
//   true,
//   (),
//   (class: (primary: p), var: (primary: n)),
//   $type-function: (list: --var-get),
//   $functions: (var: (get: meta.get-function(get, false, var))),
// );


// Property suffix.
// @include property.variant(variant.add-suffix((border: (((top-left, top-right): (medium: 20px)))), radius));

// @debug variant.add-suffix((((): border): (medium: 20px)), radius);

// @include property.variant(variant.add-suffix((((): border): (medium: 20px)), radius));
