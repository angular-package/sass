// Sass.
@use 'sass:list';
@use 'sass:meta';

// Variables.
@forward 'dictionary.variables';
@use 'dictionary.variables' as variables;

// Functions.
@use 'dictionary.get.function' as *;

// Modules.
@use '../../../map';

// Status: DONE
// The `dictionary.merge()` function returns a global dictionary merged with `$dictionary` and/or multiple `$dictionaries`, optionally merged in `$key`.
// @param `$key` The optional key under which `$dictionary` and multiple `$dictionaries` are being merged.
// @param `$dictionary` Dictionary of map type to merge with a global dictionary.
// @arbitrary `$dictionaries...` Additional dictionaries along with a `$dictionary` to merge with a global dictionary.
// @returns The return value is global dictionary merged with `$dictionary` and/or multiple `$dictionaries`, optionally merged in `$key`.
@function merge($key: null, $dictionary, $dictionaries...) {
  $retrieved-dictionary: ();
  @each $dictionary in list.join(($dictionary, ), $dictionaries, comma) {
    $retrieved-dictionary: map.deep-merge(
      $retrieved-dictionary,
      if(meta.type-of($dictionary) == list, map.pick(list.nth($dictionary, 1), list.nth($dictionary, 2)...), $dictionary)
    );
  }

  variables.$dictionary: if(
    $key,
    map.merge(get() or (), list.append($key, $retrieved-dictionary)...),
    map.deep-merge(get() or (), $retrieved-dictionary)
  );

  @return variables.$dictionary;
}

// Examples.
// $-dictionary: (
//   (extra large, 'extra large', extra-large): xl,
//   (extra small, 'extra small', extra-small): xs,
//   class: (prefix: class-prefix, suffix: class-suffix),
//   large: lg,
//   medium: md,
//   prefix: spectre,
//   size: s,
//   small: sm,
//   suffix: end,
//   var: (prefix: var-prefix, suffix: var-suffix),
// );

// merge in `class` key
// @debug merge(class, (prefix: spectre, suffix: end)); // (word: translation, class: (prefix: spectre, suffix: end))

// merge in nested (accordion, class) key
// @debug merge((accordion, class), (prefix: spectre, suffix: end)); // (word: translation, class: (prefix: spectre, suffix: end), accordion: (class: (prefix: spectre, suffix: end)))
