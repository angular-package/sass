// Sass.
@use 'sass:list';
@use 'sass:meta';

// Functions.
@use '../list/list.to.function' as list-to;
@use 'map.get.function' as map-get;
@use 'map.pick.function' as map-pick;

// Status: DONE
// The `map.depth()` function determines the map depth.
// @param `$map` Map to check depth.
// @param `$key` Optional key to determine depth.
// @arbitrary `$nested-keys...` Optional nested keys to determine depth.
// @returns The returned value is map depth of `number`.
@function depth($map, $key: null, $nested-keys...) {
  $max-depth: 0;
  $keys: list.join(($key,), $nested-keys, comma);
  @if list.length($keys) > 1 {
    $map: map-get.get($map, list-to.to($keys, list.length($keys) - 1)...);
    $key: list.nth($keys, list.length($keys));
  }
  @each $key, $value in ($key and map-pick.pick($map, $key)) or $map  {
    $current-depth: (meta.type-of($value) == map and 1 + depth($value)) or 1;
    $max-depth: ($current-depth > $max-depth and $current-depth) or $max-depth;
  }
  @return $max-depth;
}

// Examples.
// $-map: (
//   key-3: (
//     key-2-4: 42,
//     key3: (
//       key-4: 100,
//       key5: 200
//     ),
//     key6: (
//       key7: (
//         key8: 300
//       ),
//       key9: (
//         key10: (
//           key11: 400
//         )
//       ),
//     )
//   ),
// );

// @debug depth($-map); // 5

// key
// @debug depth($-map, key-3); // 5

// Nested keys
// @debug depth($-map, key-3, key3); // 2
// @debug depth($-map, key-3, key6); // 4
// @debug depth($-map, key-3, key6, key7); // 2