// Sass.
@use 'sass:list';
@use 'sass:meta';

// Functions.
@use '../../list/list.to-map.function' as *;
@use '../../list/remove/remove.value.function';
@use '../../selector/selector.class.function' as *;
@use '../../selector/selector.nest.function' as *;
@use '../../variant/update/update.property.function';

// Mixins.
@use '../../list/list.each.mixin' as *;
@use '../class.content.mixin' as class;

// Modules.
@use '../../function';
@use '../../map';
@use '../../string';
@use '../../values';
@use '../../variant/indicator';

// Status: TODO: Add +
// The `class.variant()` mixin sets class `$variant` with `$pseudo-class` translated with `$dictionary`, and called by `$function`.
// @param `$variant` Class variant with `$pseudo-class` called by `$function`.
// @param `$pseudo-class` Pseudo class for class `$variant`.
// @param `$dictionary` Dictionary to translate class `$variant`.
// @param `$function` The function to set class `$variant`.
// @param `$content-type`
// @param `$modifier` Modify class and property in returned content arguments.
@mixin variant(
  $variant,
  $pseudo-class: (),
  $dictionary: (),
  $function: meta.get-function(class),
  $content-type: list,
  $modifier: null
) {
  @if type-of($variant) == map {
    $content-keys: (
      class,
      (2: value, 3: property, 4: property),
      (3: value, 4: value-class, 5: attribute),
      (4: value, 5: value-class),
      value,
      variant
    );
    @each $class, $attribute-variant in $variant {
      // FEATURE: (class: --selector-nest (property))
      $property: null;
      @if type-of($class) == map {
        @each $-class, $-property in $class {
          $class: $-class;
          $property: $-property;
        }
      }

      // FEATURE: Use function on property name.
      @if list.length($property) > 0 and function.has($property) {
        $property: function.call-arglist($property...);
      }

      @if type-of($attribute-variant) == map {
        @each $attribute, $variant in $attribute-variant {
          // TODO: Consider remove.
          @if type-of($attribute) == map {
            @each $key, $value in $attribute {
              $attribute: nest($key, $value);
            }
          } @else if list.length($attribute) > 0 and function.has($attribute) {
            $attribute: function.call-arglist($attribute...);
          }
          @include each($class) using($class) {
            @if type-of($variant) == map {
              // FEATURE: VARIANT 3
              @include each($attribute) using($attribute) {
                @each $value-class, $value in $variant {
                  @include class.content(
                    values.join(
                      if(&, '&', ()),
                      map.get-any($modifier, (3, class, prefix), (class, prefix), null),
                      $class,
                      $attribute,
                      map.get-any($modifier, (3, class, attribute), (class, attribute), null),
                      if(list.separator($value-class) == comma, ($value-class,), $value-class),
                      map.get-any($modifier, (3, class, suffix), (class, suffix), null),
                    ),
                    $pseudo-class,
                    $dictionary,
                    $function,
                  ) {
                    // Set property.
                    $-property: $property or $class;
                    @if $modifier {
                      // FEATURE: Set attribute as `null`.
                      @if map.has-keys($modifier, (property, attribute)) or map.has-keys($modifier, (3, property, attribute)) {
                        @if not map.get-any($modifier, (3, property, attribute), (property, attribute), null) {
                          $attribute: null;
                        }
                      }

                      $-property: update.property($-property, $modifier, $attribute, 3);
                    }

                    $values: ($class, $-property, $attribute, $value-class, $value, ($value-class: $value));
                    $content: if(
                      $content-type == map,
                      to-map($values, $content-keys...),
                      values.combine((separator: comma), $values...)
                    );
                    @if type-of($content) == list {
                      @content($content...);
                    } @else {
                      @content($content);
                    }
                  }
                }
              }
            } @else {
              // FEATURE: VARIANT 2
              @include each($variant) using($value) {
                @include each($attribute) using($value-class) {
                  @include class.content(
                    values.join(
                      if(&, '&', ()),
                      map.get-any($modifier, (2, class, prefix), (class, prefix), null),
                      indicator.remove($class, '+'),
                      map.get-any($modifier, (2, class, attribute), (class, attribute), null),
                      $value-class,
                      map.get-any($modifier, (2, class, suffix), (class, suffix), null),
                    ),
                    $pseudo-class,
                    $dictionary,
                    $function,
                  ) {
                    // Set property.
                    $-property: $property or $class;

                    // Set middle property on '+'.
                    // $middle: null;
                    // @if indicator.index($-property, '+')  {
                    //   $-property: indicator.remove($-property, '+');
                    //   $middle: map.get-any($modifier, (2, property, middle), null);
                    //   $modifier: map.deep-merge($modifier, (2: (property: (middle: $-property))));
                    // }

                    @if $modifier {
                      $-property: update.property($-property, $modifier, null, 2);
                    }

                    $values: ($class, $-property, null, $value-class, $value, ($value-class: $value));
                    $arguments: if(
                      $content-type == map,
                      to-map($values, $content-keys...),
                      values.combine((separator: comma), $values...)
                    );
                    @if type-of($arguments) == list {
                      @content($arguments...);
                    } @else {
                      @content($arguments);
                    }

                    // Restore.
                    // $modifier: map.deep-merge($modifier, (2: (property: (middle: $middle))));
                  }
                }
              }
            }
          }
        }
      } @else {
        // FEATURE: VARIANT 1
        @include each($attribute-variant) using($value) {
          @include each($class) using($class) {
            @include class.content(
              values.join(
                if(&, '&', ()),
                map.get-any($modifier, (1, class, prefix), (class, prefix), null),
                indicator.remove($class, '+'),
                map.get-any($modifier, (1, class, attribute), (class, attribute), null),
                map.get-any($modifier, (1, class, suffix), (class, suffix), null),
              ),
              $pseudo-class,
              $dictionary,
              $function
            ) {
              // Set property.
              $-property: $property or $class;

              // FEATURE: Set middle property on '+'.
              $middle: null;
              $modified: false;

              // Find '+'.
              @if indicator.index($-property, '+') {
                @if map.has-keys($modifier, (1, property, middle)) {
                  $middle: map.get-any($modifier, (1, property, middle), null);
                }

                $-property: indicator.remove($-property, '+');
                $modifier: map.deep-merge($modifier, (1: (property: (middle: $-property))));
                $modified: true;
              }

              // Modify property.
              @if $modifier {
                $-property: update.property($-property, $modifier, null, 1);
              }

              // Set `$arguments` for `@content`.
              $arguments: if(
                $content-type == map,
                to-map(($class, $-property, $value), $content-keys...),
                values.combine((separator: comma), $class, $-property, $value)
              );
              @if type-of($arguments) == list {
                @content($arguments...);
              } @else {
                @content($arguments);
              }

              // Restore previous modifier for variant 1.
              @if $modified {
                $modifier: map.deep-merge($modifier, (1: (property: (middle: $middle))));
              }
            }
          }
        }
      }
    }
  }
}
