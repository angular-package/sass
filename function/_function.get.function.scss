// Variables.
@use 'function.variables' as variables;

// Functions.
@use 'function.is.function';

// Modules.
@use '../meta';
@use '../string';

// Status: DONE
// The `function.get()` function returns `function` named `$name`. The `$name` must be in a form `module-function`.
// @param `$name` Function name in a form `module-function` to retrieve.
// @param `$prefix` Prefix to get function from `$name`. By default, ''.
// @param `$functions` Additional functions of `map` type to get by using `$name`.
// @returns The returned value is an existing `function` or from `$functions` retrieved by using `$name` with `$prefix`.
@function get($name, $prefix: variables.$prefix, $functions: meta.$module-functions) {
  @if meta.type-of($name) == string {
    @if function.is($name, $prefix, $functions) {
      $name: string.replace($name, first, $prefix, '');
      @return meta.get-function(if(string.index($name, '-'), string.replace($name, first, '-', ':'), $name), false, null, $functions);
    }
  }
  @return null;
}

// Examples.
// string
// @debug get(nth); // get-function("nth")
// @debug get(list-nth); // get-function("nth")
// @debug get(selector-nest); // get-function("nest")

// prefix
// @debug get('@nth', '@'); // get-function("nth")
// @debug get('/nth', '/'); // get-function("nth")
// @debug get('+nth', '+'); // get-function("nth")

// null
// @debug get(__list-nth, __); // null
