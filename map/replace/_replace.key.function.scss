// Sass.
@use 'sass:map';

// Status: DONE
// The `map.replace-key()` function returns `$map` with key `$key-replace` replaced by `$key-replacement`.
// @param `$map` A map in which `$key-replace` key is replaced with `$key-replacement`.
// @param `$key-replace` A key to replace with `$key-replacement` in `$map`.
// @param `$key-replacement` Key to replace `$key-replace` key in `$map`.
// @returns The returned value is a `$map` with replaced key `$key-replace` by `$key-replacement`.
@function replace-key($map, $key-replace, $key-replacement) {
  @if map.has-key($map, $key-replace) {
    $result: ();
    @each $key, $value in $map {
      $result: map.deep-merge(
        $result,
        ($key == $key-replace and $key-replacement or $key: $value)
      );
    }
    @return $result;
  }
  @return $map;
}

// Examples.
// $-map: (
//   key replace: (map: 1),
//   key-replace: (map: 2),
// );

// replace string key
// @debug replace-key($-map, key-replace, new-key); // (key replace: (map: 1), new-key: (map: 2))
// @debug replace-key(('bold king': 1, b: 2, c: 3, 'bold': 'king', 'test': 'king'), 'bold', 'hairy'); // ("hairy king": 1, b: 2, c: 3)
// @debug replace-key(('bold king': 1, b: 2, c: 3, 'o': bool), 'o', 'ooo'); // ("bold king": 1, b: 2, c: 3, "ooo": bool)
// @debug replace-key((a: 1, b: 2, c: 3), 'a', 'd'); // ("d": 1, b: 2, c: 3)

// replace string key with a list key
// @debug replace-key($-map, key-replace, new key); // (key replace: (map: 1), new key: (map: 2))

// replace list key
// @debug replace-key($-map, key replace, 'd'); // ("d": (map: 1), key-replace: (map: 2))
