// Modules.
@use '../list';
@use '../map';
@use '../selector';
@use 'indicator';

// Functions.
@use '../color/functions/color.name.function' as *;
@use '../color/functions/name';

// Status: DONE
// The `variant.nest()` nest indicated by '+' variant of `list` or `map` type.
// @arbitrary `$variants...`
// @returns The returned value is nested `list` or `map`.
@function nest($variants...) {
  $result: ();
  @each $variant in $variants {
    @each $name, $resolved-value in $variant {
      $-resolved-value: $resolved-value;
      @each $name in if(list.separator($name) == comma, $name, ($name,)) {
        $nested: indicator.index($name, '+');
        @if $nested {
          $name: if($nested, indicator.remove($name, '+'), $name);
          @if type-of($resolved-value) == map {
            @each $key, $v in $resolved-value {
              $resolved-value: map.key-replace($resolved-value, $key, list.nth(selector.nest($name, $key), 1));
            }
          } @else {
            $resolved-value: name.nest($name, $resolved-value);
          }
        }

        $result: map.deep-merge($result, ($name: if($nested, $resolved-value, $-resolved-value)));
      }
    }
  }
  @return $result;
}

// Examples.
// @debug nest((control: (disabled, error, info, success, warning)));
// @debug nest((+control: (disabled, error, info, success, warning)));
// @debug nest((+primary: (color: #aaa, dark: #bbb, light: #ccc)));

// nest color variant
// @debug nest(((+secondary, primary): (color, dark, light)));
// @debug nest(((+secondary, primary): (color, (ultra dark, -30%), (mega light, 60%))));
