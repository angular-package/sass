// Sass.
@use 'sass:list';

// Functions.
@use '../../../list/get/get.list.function' as list-get-list;

// Status: DONE
// The `schema.has-multiple-colors()` function.
// @param `$schema`
// @param `$indicator`
// @param `$result`
// @returns
@function has-multiple-colors($schema, $indicator: (), $result: bool) {
  @if type-of($schema) == list and list.separator($schema) == space and list.length($schema) > 1 {
    @if list-get-list.list($schema, last) == $indicator {
      @return if($result == index, list.length($schema), true);
    } @else if list-get-list.list($schema, first) == $indicator {
      @return if($result == index, 1, true);
    }
  }
  @return if($result == index, null, false);
}

// Examples.
// @debug has-multiple-colors((color, 1%) (dark, 3%) (light, 5%) ()); // true
// @debug has-multiple-colors((color, 1%) (dark, 3%) (light, 5%) (), ()); // true
// @debug has-multiple-colors((color, 1%) (dark, 3%) (light, 5%) [], []); // true

// @debug has-multiple-colors(() (color, 1%) (dark, 3%) (light, 5%)); // true
// @debug has-multiple-colors(() (color, 1%) (dark, 3%) (light, 5%) (), ()); // true
// @debug has-multiple-colors([] (color, 1%) (dark, 3%) (light, 5%) [], []); // true

// $result index
// @debug has-multiple-colors((color, 1%) (dark, 3%) (light, 5%) (), (), index); // 4
// @debug has-multiple-colors((color, 1%) (dark, 3%) (light, 5%) (), (), index); // 4
// @debug has-multiple-colors((color, 1%) (dark, 3%) (light, 5%) [], [], index); // 4

// @debug has-multiple-colors(() (color, 1%) (dark, 3%) (light, 5%), (), index); // 1
// @debug has-multiple-colors(() (color, 1%) (dark, 3%) (light, 5%), (), index); // 1
// @debug has-multiple-colors([] (color, 1%) (dark, 3%) (light, 5%), [], index); // 1
