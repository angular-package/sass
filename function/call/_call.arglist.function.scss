// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

// Functions.
@use '../../list/list.limit.function' as list-limit;
@use '../function.get.function' as function-get;

// Status: DONE
// The `call.arglist()` function calls function of `$name` on `$arglist` arguments as comma-separated list and optional `$argmap` as rest named arguments.
// @param `$name` Function name to call arguments from `$arglist` as comma-separated arguments or argument.
// @param `$arglist` Comma-separated list as function arguments on which to call function of `$name`.
// @param `$argmap` Additional arguments as `map` (arguments: (argument: value)) or (args: (argument: value)
//        following `$arglist` to pass.
// @param `$prefixes` Available prefixes of the function `$name`.
// @param `$separators` Available separators of the function `$name.
// @param `$functions` Available functions to call besides built-in.
// @param `$function` Function retrieved by using `$name`, `$prefixes` and `$separators` from optional `$functions`.
// @returns The returned value is the result of invoked function of `$name` on `$arglist` and optional `$argmap`.
@function arglist(
  $name,
  $arglist,
  $argmap: null,
  $prefixes: null,
  $separators: null,
  $functions: null,
  $function: function-get.get($name, $prefixes, $separators, $functions),
) {
  @if $name {
    $arglist: list.separator($arglist) == space 
      and ($arglist,)
      or $arglist;

    $arglast: list.nth($arglist, list.length($arglist));
    @if meta.type-of($arglast) == map
      and (map.has-key($arglast, args) or map.has-key($arglast, arguments)) {
      $argmap: meta.type-of($argmap) == map
        and map.deep-merge($arglast, (list.nth(map.keys($arglast), 1): $argmap))
        or map.get($arglast, list.nth(map.keys($arglast), 1));
    }
    @return meta.type-of($argmap) == map
      and meta.call(
        $function,
        list-limit.limit($arglist, list.length($arglist) - 1)...,
        $argmap...
      )
      or meta.call($function, $arglist...);
  }
  @return null;
}


// Examples.
// $prefixes: ('--', '__', '@', '&', '+', '/') !default;
// $separators: ('-', '_', '.') !default;

// Map with `arguments` or `args` key to pass as rest arguments.
// @debug arglist(--list-nth, (a 2 3, (args: (n: 2))), null, $prefixes, $separators); // 2
// @debug arglist(--list-nth, (a 2 13, (args: (n: 3))), null, $prefixes, $separators); // 13
// @debug arglist(--list-nth, (a 2 13, (arguments: (n: 3))), null, $prefixes, $separators); // 13

// map as the second argument
// @debug arglist(--list-join, (a 2 3, (list1: b 4)), (list2: c 5, bracketed: true, separator: comma), $prefixes, $separators); // 2
