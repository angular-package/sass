// Sass.
@use 'sass:list';
@use 'sass:map';

// Modules.
@use '../../function';
@use '../../meta';
@use '../../values';
@use '../../variant';
@use '../name';
@use 'color';

// Functions.
@use '../../list/get/get.list.function' as list-get-list;
@use '../../list/list.append.function' as list-append;
@use '../../list/list.range.function' as list-range;
@use '../../list/remove/remove.nth.function' as list-remove-nth;

// Module functions.
@use '../functions/color.name.function' as *;

// Add.
function.$functions: map.set(function.$functions, color, name, meta.get-function(name));

// Status: DONE
// NOTE: consider adding bracketed adjust
// The `palette.create()` function.
// @arbitrary `$values...`
// @returns
@function create($values...) {
  $palette: ();

  // FEATURE: Prepare variant colors.
  $additional-colors: ();

  // Iterate `$values`.
  $i: 1;
  @each $variant in $values {
    @if type-of($variant) == map {
      @each $class, $colors in $variant {
        // Variant colors to add after iterate.
        $variant-colors: ();

        // Iterate colors to obtain variant colors.
        @each $color in $colors {
          // Get indicator index.
          $indicator-index: variant.indicator-index($color, '+');

          // FEATURE: Nest colors.
          @if $indicator-index {
            $color: list.set-nth(
              $color,
              $indicator-index,
              variant.indicator-remove(list.nth($color, $indicator-index), '+')
            );
            $variant-colors: values.join((separator: comma), $variant-colors, name.nest($color...));
          }

          // FEATURE: Get additional colors.
          @else if list.separator($color) == space and list.length($color) > 1 and list.length(list-get-list.list($color, last)) == 0 {
            // Retrieve variant color.
            $variant-color: name.retrieve(list.nth($color, 1));

            // Add additional colors from range 2.
            $additional-colors: map.deep-merge(
              $additional-colors,
              (variant.indicator-remove($class, '+'): (map.get($variant-color, name): list-range.range($color, 2)))
            );

            // Append color to variant colors.
            $variant-colors: list-append.append($variant-colors, list.nth($color, 1), comma);
          } @else {
            $variant-colors: list-append.append($variant-colors, $color, comma);
          }
        }

        $variant: map.deep-merge($variant, ($class: $variant-colors));
      }

      $values: list.set-nth($values, $i, $variant);
      $i: $i + 1;
    }
  }

  // Nest values.
  $variant: variant.nest($values...);

  // FEATURE: Create variant from list.
  @each $class, $color in $variant {
    @if type-of($color) == list or type-of($color) == string {
      $palette: map.set($palette, $class, variant.create($color, $type: color));
    }
  }

  // FEATURE: Add indicator.
  @each $name, $variant in $palette {
    @each $class, $color in $variant {
      $palette: map.deep-merge($palette, ($name: ($class: name.indicator-add($color))));
    }
  }

  // FEATURE: Add additional colors to variant.
  @if list.length($additional-colors) > 0 {
    @each $name, $variant in $additional-colors {
      @each $name in if(list.separator($name) == space, ($name,), $name) {
        @each $class, $colors in $variant {
          $palette: color.add($palette, $name, $class, space, $colors...);
        }
      }
    }
  }
  @return $palette;
}

// Examples.
// default variant.
// @debug create((primary: (primary: primary color, primary dark: primary color dark)));

//
// @debug create((control: (disabled, error, warning))); // (control: (disabled color: disabled color, error color: error color, warning color: warning color))

//
// @debug create((control: (disabled, error, warning), core: (primary, secondary))); // (control: (disabled: disabled color, error: error color, warning: warning color), core: (primary: primary color, secondary: secondary color))

//
// @debug create((+control: (disabled, error, warning), +primary: (basic color, extended dark, minimum light))); // (control: (control disabled: control disabled color, control error: control error color, control warning: control warning color), primary: (primary basic color: primary basic color, primary extended dark: primary extended color dark, primary minimum light: primary minimum color light))
// @debug create(((+primary, +secondary): (color, dark, light))); // (primary: (primary color: primary color, primary dark: primary color dark, primary light: primary color light), secondary: (secondary color: secondary color, secondary dark: secondary color dark, secondary light: secondary color light))

//
// @debug create((+primary: (color, ((basic dark) 3% 0.5), dark, light)));

//
// @debug create(((+accent, primary): (color, ((basic dark) 3% 0.5) (light, 10%) (dark, 5%) (), light, dark)));

// Multiple colors
// @debug create(((+accent, primary): (color, ((basic dark) 3% 0.5) (light, 10%) (dark, 5%) (), light, dark)));
