// Sass.
@use 'sass:list';

// Modules.
@use '../../meta';

// Functions.
@use '../../list/list.nth.function' as *;
@use '../function.is.function' as *;
@use '../function.pick.function' as *;
@use '../function.prefix.function' as *;
@use '../function.remove.function' as *;
@use 'call.arglist.function';

// Status: DONE
// The `call.by-list()` function calls `$function` on nested lists or function from each nested list of `$list` with a separator comma where
// elements are arguments or space where the whole list is an argument.
// Nested list can contain function name in the first element, then it's used instead of `$function` argument to call following list.
// @param `$list` List with nested lists on which to call `$function` or function from nested lists.
// @param `$prefix` Allowed prefixes to pick function name from nested lists of `$list`.
// @param `$separator` Allowed separators to pick function name from nested lists of `$list`.
// @param `$functions` Functions instead of global functions retrieved from `function.$functions`.
// @param `$execute` Executes the function.
// @param `$arguments` Additional arguments as `list` or `map` to pass into `$list`.
// @returns The returned value is `$list` with nested lists invoked by function.
@function by-list(
  $list,
  $prefix: null,
  $separator: null,
  $functions: null,
  $execute: true,
  $arguments: null,
) {
  @if type-of($list) == list {
    $result: ();
    $index: 1;
    @while $execute == true {
      $function-arguments: null;
      @if meta.of-type(list map string, list.nth($list, $index)) {
        $element: list.nth($list, $index);
        @if type-of(list.nth($list, $index)) == string {
          @if is(list.nth($list, $index), $prefix, $separator, $functions) {
            $element: nth($list, $index, $index + 1, 0);
          }
        }

        $function-arguments: pick(
          $element,
          name arguments,
          $prefix,
          $separator,
          $functions
        );
      }
      @if $function-arguments {
        $result: list.append(
          $result,
          call.arglist(
            nth($function-arguments, 1),
            nth($function-arguments, 2),
            $prefix,
            $separator,
            $functions,
            $arguments: $arguments
          ),
          list.separator($list)
        );
        $list: remove($list, $prefix, $separator, $functions);
      } @else {
        $result: list.append($result, list.nth($list, $index), list.separator($list));
        $index: $index + 1;
      }
      @if $index > list.length($list) {
        $execute: false;
      }
    }
    @return $result;
  }
  @return $list;
}
