// Sass.
@use 'sass:color';
@use 'sass:list';
// @use 'sass:map';
@use 'sass:math';
// @use 'sass:meta';
@use 'sass:selector';
// @use 'sass:string';

// Variables.
@use 'function.variables' as variables;

// Modules.
@use '../map';
@use '../meta';
@use '../string';

// Status: DONE
// The `function.get()` function returns `function` named `$name`. The `$name` can be a string `module-function` or `module.function` or
// map `(module: function)`.
// @param `$name` Function name to retrieve.
// @param `$prefix` Function prefixes to search in `$name`.
// @param `$functions` Additional functions of `map` type to get by using `$name`.
// @returns The returned value is an existing `function` or from `$functions` retrieved by using `$name` with `$prefix`.
@function get($name, $prefix: variables.$prefix, $functions: variables.$functions) {
  @if type-of($name) == map or type-of($name) == string {
    // Map.
    @if type-of($name) == map {
      @each $-module, $-name in $name {
        @if list.index(string.index($-module, $prefix...), 1) {
          $name: (string.replace($-module, first, $prefix, ''), $-name);
        } @else {
          @return null;
        }
      }

    // String.
    } @else if type-of($name) == string  {
      @if list.index(string.index($name, $prefix...), 1) {
        $name: string.replace($name, first, $prefix, '');
        @if meta.function-exists($name) {
          @return meta.get-function($name);
        }
      } @else {
        @return null;
      }

      $name: if(string.index($name, '.'), string.split($name, '.', 1), string.split($name, '-', 1));
    }

    // First check `$function`.
    @if type-of($name) == list {
      @if map.get($functions, $name) {
        @return map.get($functions, $name);
      }
    }

    // Return with default.
    @if map.get($functions, $name) {
      @return map.get($functions, $name);
    }
    @if list.length($name) == 2 {
      @return meta.get-function(list.nth($name, 2), false, list.nth($name, 1));
    }
  }
  @return null;
}

// Alias name.
@function get-function($name, $prefix: variables.$prefix, $functions: variables.$functions) {
  @return get($name, $prefix, $functions);
}

// Examples.
// string
// @debug get(nth); // get-function("nth")
// @debug get(list-nth); // get-function("nth")
// @debug get(selector-nest); // get-function("nest")
// @debug get('selector.nest'); // get-function("nest")

// map
// @debug get((selector: nest)); // get-function("nest")

// string + prefix
// @debug get('--selector.nest'); // get-function("nest")
// @debug get('---selector.nest'); // get-function("nest")
// @debug get('@nth'); // get-function("nth")
// @debug get('/nth'); // get-function("nth")
// @debug get('+nth'); // get-function("nth")

// prefix + map
// @debug get((--selector: nest), '--'); // get-function("nest")

// null
// @debug get(__list-nth, __); // null
