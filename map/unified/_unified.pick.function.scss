// Sass.
@use 'sass:list';
@use 'sass:map';

// Functions.
@use '../../list/list.append.function' as list-append;
@use 'unified.get.function' as unified-get;
@use 'unified.merge.function' as unified-merge;

// Status: DONE
// The `map.pick()` function returns a copy of `$map` of `$keys`.
// @param `$map` A map from which values of `$keys` are taken.
// @param `$key` Required key to pick from `$map`.
// @arbitrary `$keys...` List of keys to get the values from `$map`.
// @returns The returned value is a copy of `$map` built of `$keys`.
@function pick($map, $unified-key, $unified-keys...) {
  $result: ();
  @each $unified-key in list-append.append((), $unified-key, comma, $unified-keys...) {
    $result: unified-merge.merge(
      $result,
      $unified-key,
      unified-get.get($map, $unified-key)
    );
  } 
  @return list.length($result) > 0 and $result or null;
}

// Examples.
// @debug pick((a: 1, b: 2, c: 3, d: 4), a, b, d); // (a: 1, b: 2, d: 4)
// @debug pick((a: (b: (d: 1)), b: 2, c: 3, d: 4), (a, b, d)); // (a: (b: (d: 1)))
// @debug pick((a: (b: 1), b: 2, c: (d: 2), d: 4), (a, b), (c, d)); // (a: (b: 1), c: (d: 2))

// @debug pick((a: 1, b: 2, c: 3, d: 4, a b: 5), a b); // (a b: 5)
// @debug pick((a: 1, b: 2, c: 3, d: 4, a b: 5, c d: 6), a b, c d); // (a b: 5, c d: 6)
// @debug pick((a: 1, b: 2, c: 3, d: 4, e: 5), e); // (e: 5)

// $-theme: (
//   dark: (
//     'dark.palette': (),

//     basic large: (
//       '': border,
//       dark: border dark,
//       light: border light
//     ),
//   ),
//   basic: (
//     'default.palette': (),

//     'gray.palette': (
//       'gray': 'gray' color,
//       'gray' dark: 'gray' dark,
//       'gray' light: 'gray' light
//     ),

//     'bg.palette': (
//       bg: bg color,
//       bg dark: bg dark,
//       bg light: bg light
//     ),

//     basic large: (
//       '': border,
//       dark: border dark,
//       light: border light
//     ),

//     extended small: (
//       '': primary,
//       dark: primary dark,
//       light: primary light
//     ),

//     [primary]: (
//       primary dark: primary dark,
//     ),

//     (key1, key2): (
//       primary: primary1
//     ),

//     key1: primary,

//     key2: (
//       settings1: ( display: true ),
//       settings2: ( display: true ),
//     ),

//     key3: (
//       settings3: ( display: true ),
//       settings4: ( display: true ),
//     ),

//     key4: (
//       settings5: ( display: true ),
//       settings6: ( font-size: 5px ),
//     ),

//     key5: (
//       settings7: ( display: true ),
//       settings8: ( font-size: 15px ),
//     ),

//     key6: (
//       settings9: ( display: true ),
//       settings10: ( font-size: 15px ),
//     ),
//   )
// );

// Pattern.
// @debug pick(map.get($-theme, basic), '*.palette');
// @debug pick($-theme, (basic, '*.palette'));

// List space separator.
// @debug pick(map.get($-theme, basic), basic large);  $fallback: nullxtended small);
// @debug pick(map.get($-theme, basic), key1, basic large);

// Nested + string.
// @debug pick($-theme, (basic, key1), (basic, (key1, key2)));

// Nested + list.
// @debug pick($-theme, (basic, (key1, key2)));
// @debug pick($-theme, dark, (basic, (key1, key2)));

// Bracketed.
// @debug pick(map.get($-theme, basic), [primary]);

// Nested + bracketed.
// @debug pick($-theme, (basic, [primary]));

// $-map: (
//   a test: 1,
//   b test: 2,
//   c: 3,
//   (d, test): 4,
//   e: (f: (g: 6))
// );

// @debug pick(
//   $-map,
//   a,
//   b test,
//   (d, test),
//   (e, f, g)
// );


// @debug pick(
//   map.get($-theme, basic),
//   // '*.palette', // FEATURE: suffix .palette
//   // '$palette', // FEATURE:
//   // [primary], // FEATURE: bracketed
//   // basic large, // FEATURE: string
//   // ((key1, key2),), // FEATURE: key with comma
//   // key1 // FEATURE: string
//   (basic, '$palette')
// );

// @debug pick($-theme, (basic, '$palette'), );
// @debug pick($-theme, (basic, '^key'), (basic, '^key', settings1), (basic, '*key'));
