// Sass.
@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:selector';

// Functions.
@use '../list/list.swap.function' as list-swap;
@use '../map/get/get.index.function' as map-get-index;
@use 'function.config.function' as *;
@use 'function.name.function' as *;
@use 'function.prefix.function' as *;

// Status: DONE
// The `function.is()` function checks whether `$name` in a form `module-function` or `module.function` is existing `function` or from `$functions`.
// @param `$name` Function name to check.
// @param `$prefixes` Available prefixes for the function in `$name`.
// @param `$separators` Available separators between module and function in string type `$name`.
// @param `$functions` Additional module functions(instead of built-in) of `map` type to check.
// @returns The returned value is a `bool` indicating `$name` is an existing function or from `$functions` function.
@function is($name, $prefixes: null, $separators: null, $functions: null) {
  @if list.index(list map string, meta.type-of($name)) {
    @if not prefix($name, $prefixes) {
      @return false;
    } @else {
      $name: name($name, $prefixes, $separators);
    }

    // First check `$functions`.
    @if $functions {
      $function: if(
        map.has-key($functions, $name...),
        map.get($functions, $name...),
        map-get-index.index($functions, $name)
      );
      @return meta.type-of($function) == function;
    } @else {
      @return meta.function-exists(
        if(
            list.length($name) == 2,
            list-swap.swap($name, 1, 2),
            list.nth($name, 1)
          )...
      );
    }
  }
  @return false;
}

// Examples.
// $prefixes: ('--', '__', '@', '&', '+', '/') !default;
// $separators: ('-', '_', '.') !default;

// string
// @debug is(--nth, $prefixes); // true
// @debug is(--color, $prefixes); // false // TODO:  color

// string + delimiter
// @debug is(--selector-nest, $prefixes); // true
// @debug is(--var-get); // true

// string + dot
// @debug is('--selector.nest', $prefixes, $separators); // true

// string false
// @debug is(any); // false

// prefixed --
// @debug is(--selector-nest, $prefixes); // true
// @debug is('--selector.nest', $prefixes, $separators); // true

// list
// @debug is(--list nth, $prefixes); // true
// @debug is(--selector nest, $prefixes); // true

// @debug is((10xfunction #aaa)); // false

// map
// @debug is((--list: nth), $prefixes); // true
// @debug is((--selector: nest), $prefixes); // true

// @debug is((--list: nth), $prefixes); // true
// @debug is((--selector: nest), $prefixes); // true

// @debug is((10xfunction: #aaa)); // false

// @debug is(no-function); // false
// @debug is(nth list); // false
