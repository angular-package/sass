// Sass.
@use 'sass:list';
@use 'sass:map';

// Modules.
@use '../scheme';

// Functions.
@use 'color.property-color.mixin' as *;
@use 'color.scheme-color.mixin' as *;

// Status: REVIEW:
// The `color.color()` mixin contains the `color` style of the given `$color` CSS variable name without the prefix.
// @param `$color`
// @param `$hue`
// @param `$saturation`
// @param `$lightness`
// @param `$alpha`
// @param `$fallback`
// @param `$important`
// @param `$selector`
// @param `$dictionary`
// @param `$property`
@mixin color(
  $color,
  $hue: null,
  $saturation: null,
  $lightness: null,
  $alpha: null,
  $fallback: null,
  $important: false,
  $dictionary: (),
  $property: color
) {
  @if type-of($color) == map {
    @if scheme.has($color) {
      @include scheme-color($color, $hue, $saturation, $lightness, $alpha, $fallback, $important, $dictionary, $property);
    } @else {
      @include property-color(
        if(list.index(map.values($color), hsla), ($property: $color), $color),
        $hue, $saturation, $lightness, $alpha, $fallback, $important, $dictionary
      );
    }
  } @else {
    @include property-color(($property: $color), $hue, $saturation, $lightness, $alpha, $fallback, $important, $dictionary);
  }
}

// Examples.
// :host {
  // var color
  // @include color(primary dark); // color: var(--s-primary-color-dark);

  // different property
  // @include color((background-color: primary dark));
  // :host {
  //   background-color: var(--s-primary-color-dark);
  // }

  // properties
  // @include color(primary dark, $property: color background);
  // :host {
  //   color: var(--s-primary-color-dark);
  //   background: var(--s-primary-color-dark);
  // }

  // @include color((color background background-color: primary dark));
  // color: var(--s-primary-color-dark);
  // background: var(--s-primary-color-dark);
  // background-color: var(--s-primary-color-dark);

  // fallback
  // @include color(primary dark, $fallback: orange); // color: var(--s-primary-color-dark, orange);
  // @include color(primary dark (fallback: orange)); // color: var(--s-primary-color-dark, orange);

  // fallback + negative
  // @include color(primary dark (fallback: orange, negative: true)); // color: calc(var(--s-primary-color-dark, orange) * -1);
  // @include color('!' primary dark (fallback: orange)); // color: calc(var(--s-primary-color-dark, orange) * -1);

  // important
  // @include color(primary silver, $important: true); // color: var(--s-primary-color-silver) !important;

  // selector nest
  // @include color(primary silver, $selector: '.active, .disabled'); // TODO: Check.
  // :host .active, :host .disabled {
  //   color: var(--s-primary-silver-color);
  // }

  // hsla color
  // @include color(primary dark ':hsla'); // color: hsla(var(--s-primary-color-h), var(--s-primary-color-s), var(--s-primary-color-l), var(--s-primary-color-a));
  // @include color((primary dark: hsla)); // color: hsla(var(--s-primary-color-h), var(--s-primary-color-s), var(--s-primary-color-l), var(--s-primary-color-a));

  // hsla + adjust hue
  // @include color(primary dark ':hsla', 15deg); // color: hsla(calc(var(--s-primary-color-h) + 15deg), var(--s-primary-color-s), var(--s-primary-color-l), var(--s-primary-color-a));
  // @include color((primary dark: hsla), 15deg); // color: hsla(calc(var(--s-primary-color-h) + 15deg), var(--s-primary-color-s), var(--s-primary-color-l), var(--s-primary-color-a));

  // hsla + adjust hue saturation lightness alpha
  // @include color(primary dark ':hsla', 15deg, 45%, 23%, 0.4); // color: hsla(calc(var(--s-primary-color-h) + 15deg), calc(var(--s-primary-color-s) + 45%), calc(var(--s-primary-color-l) + 23%), calc(var(--s-primary-color-a) + 0.4));
  // @include color(primary dark ':hsla', -15deg, -45%, -23%, -0.2); // color: hsla(calc(var(--s-primary-color-h) - 15deg), calc(var(--s-primary-color-s) - 45%), calc(var(--s-primary-color-l) - 23%), calc(var(--s-primary-color-a) - 0.2));
  // @include color((primary dark: hsla), '*' 5deg, '/' 3, '*' 23%, '+' 0.2); // color: hsla(calc(var(--s-primary-color-h) * 5deg), calc(var(--s-primary-color-s) / 3), calc(var(--s-primary-color-l) * 23%), calc(var(--s-primary-color-a) + 0.2));
  // @include color(((primary dark,) (hue: '*' 5deg, saturation: '/' 3, lightness: '*' 23%, alpha: '+' 0.2): hsla)); // color: hsla(calc(var(--s-primary-dark-h) * 5deg), calc(var(--s-primary-dark-s) / 3), calc(var(--s-primary-dark-l) * 23%), calc(var(--s-primary-dark-a) + 0.2));

  // color properties + adjusted hue and lightness alpha
  // @include color((
  //   color: (primary dark: hsla),
  //   background-color: ((primary dark, 15%, 0.1): hsla),
  //   background: ('orange' light: hsla),
  //   border-color: (border-color)
  // ), 15deg);

  // color: hsla(calc(var(--s-primary-color-h) + 15deg), var(--s-primary-color-s), var(--s-primary-color-l), var(--s-primary-color-a));
  // background-color: hsla(calc(var(--s-primary-color-dark-h) + 15deg), var(--s-primary-color-dark-s), calc(var(--s-primary-color-dark-l) + 15%), calc(var(--s-primary-color-dark-a) + 0.1));
  // background: hsla(calc(var(--s-orange-color-h) + 15deg), var(--s-orange-color-s), var(--s-orange-color-l), var(--s-orange-color-a));
  // border-color: var(--s-border-color);

  // scheme + color properties + adjusted hue and lightness alpha
  // @include color((
  //   dark: (
  //     color: (primary dark: hsla),
  //     background-color: ((primary dark, 15%, 0.1): hsla),
  //     background: ('orange' light: hsla),
  //     border-color: (border-color)
  //   ),
  //   light: (
  //     background: ('orange' light: hsla),
  //   )
  // ), 15deg);
  // @media (prefers-color-scheme: dark) {
  //   :host {
  //     color: hsla(calc(var(--s-primary-color-h) + 15deg), var(--s-primary-color-s), var(--s-primary-color-l), var(--s-primary-color-a));
  //     background-color: hsla(calc(var(--s-primary-color-dark-h) + 15deg), var(--s-primary-color-dark-s), calc(var(--s-primary-color-dark-l) + 15%), calc(var(--s-primary-color-dark-a) + 0.1));
  //     background: hsla(calc(var(--s-orange-color-h) + 15deg), var(--s-orange-color-s), var(--s-orange-color-l), var(--s-orange-color-a));
  //     border-color: var(--s-border-color);
  //   }
  // }
  // @media (prefers-color-scheme: light) {
  //   :host {
  //     background: hsla(calc(var(--s-orange-color-h) + 15deg), var(--s-orange-color-s), var(--s-orange-color-l), var(--s-orange-color-a));
  //   }
  // }

  // @include color(( background: ( dark: (code, -42.5%), light: (code, 42.5%), normal: (code, 42.5%), )));
  // :host {
  //   background: hsla(var(--s-code-color-h), var(--s-code-color-s), calc(var(--s-code-color-l) + 42.5%), var(--s-code-color-a));
  // }
  // @media (prefers-color-scheme: dark) {
  //   :host {
  //     background: hsla(var(--s-code-color-h), var(--s-code-color-s), calc(var(--s-code-color-l) - 42.5%), var(--s-code-color-a));
  //   }
  // }
  // @media (prefers-color-scheme: light) {
  //   :host {
  //     background: hsla(var(--s-code-color-h), var(--s-code-color-s), calc(var(--s-code-color-l) + 42.5%), var(--s-code-color-a));
  //   }
  // }

  // @include color(( dark: (code, -42.5%), light: (code, 42.5%), normal: (code, 42.5%), ), $property: color background);
  // :host {
  //   color: hsla(var(--s-code-color-h), var(--s-code-color-s), calc(var(--s-code-color-l) + 42.5%), var(--s-code-color-a));
  //   background: hsla(var(--s-code-color-h), var(--s-code-color-s), calc(var(--s-code-color-l) + 42.5%), var(--s-code-color-a));
  // }
  // @media (prefers-color-scheme: dark) {
  //   :host {
  //     color: hsla(var(--s-code-color-h), var(--s-code-color-s), calc(var(--s-code-color-l) - 42.5%), var(--s-code-color-a));
  //     background: hsla(var(--s-code-color-h), var(--s-code-color-s), calc(var(--s-code-color-l) - 42.5%), var(--s-code-color-a));
  //   }
  // }
  // @media (prefers-color-scheme: light) {
  //   :host {
  //     color: hsla(var(--s-code-color-h), var(--s-code-color-s), calc(var(--s-code-color-l) + 42.5%), var(--s-code-color-a));
  //     background: hsla(var(--s-code-color-h), var(--s-code-color-s), calc(var(--s-code-color-l) + 42.5%), var(--s-code-color-a));
  //   }
  // }
// }
