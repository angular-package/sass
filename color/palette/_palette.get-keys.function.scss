// Sass.
@use 'sass:list';
@use 'sass:map';

// Functions.
@use '../../list/remove/remove.nth.function' as list-remove-nth;
@use '../name/name.index.function';

// Status: DONE
// The `palette.get-keys()` function returns palette variant.
// @param `$palette` Color palettes to get variant or variant color.
// @param `$key`
// @arbitrary `$keys...`
// @returns The returned value is palette variants or variant colors .
@function get-keys($palette, $key, $keys...) {
  @if $key {
    @each $current-key, $value in $palette {
      @if name.index($current-key, $key) {
        @if type-of($value) == map {
          $value: map.set(
            $value,
            result,
            list.append(map.get($palette, result) or map.get($value, result) or (), $current-key)
          );
        }
        @if list.length($keys) > 0 {
          @return get-keys($value, list.nth($keys, 1), list-remove-nth.nth($keys, 1)...);
        } @else {
          @return map.get($value, result);
        }
      }
    }
  }
  @return $palette;
}

// Examples.
$example: (
  test basic: (
    basic two: (
      hue saturation: (
        lightness alpha: hsla(15deg, 30%, 35%, 1)
      )
    ),

    extended: (
      accent: (
        secondary: ()
      )
    )
  )
);

// nested 2
// @debug get-keys($example, test, two); // (test basic) (basic two)
// @debug get-keys($example, basic, extended); // (test basic) extended

// nested 3
// @debug get-keys($example, test, two, saturation); // (test basic) (basic two) (hue saturation)
