// Sass.
@use 'sass:list';
@use 'sass:map';

// Functions.
@use '../../list/list.append.function' as list-append;
@use 'unified.is-key.function' as unified-is-key;

// Status: DONE
// The `map.unified-get()` function based on a unified key returns the value associated with `$unified-key` in `$map`.
// @param `$map` A map to get the value by using required `$unified-key` and additional `$unified-keys`.
// @param `$unified-key` Required key or nested key as comma-separated list used to get the value from `$map`.
// @arbitrary `$unified-keys...` Additional unified keys to get from `$map`.
// @returns The returned value is the value associated with required `$unified-key` or list associated 
// with required `$unified-key` and additional `$unified-keys` from the `$map`.
@function get($map, $unified-key, $unified-keys...) {
  $result: ();
  @each $unified-key in list.join(($unified-key,), $unified-keys, comma) {
    $result: list-append.append(
      $result,
      if(
        unified-is-key.is-key($unified-key),
        map.get($map, $unified-key...),
        map.get($map, $unified-key)
      ),
      comma
    );   
  }
  @return if(list.length($result) == 1, list.nth($result, 1), $result);
}

// Examples.
// $-map: (
//   light theme: (
//     primary palette: (
//       primary: primary color,
//       primary dark: primary color dark
//     )
//   ),
//   (dark theme, normal theme): (
//     silver: #f1f1f1,
//     red: #d72000,
//   )
// );

// simple key
// @debug get($-map, light theme); // (primary palette: (primary: primary color, primary dark: primary color dark))

// nested key
// @debug get($-map, (light theme, primary palette)); // (primary: primary color, primary dark: primary color dark)

// null
// @debug get($-map, wrong key); // null

// Multiple
// key string
// @debug get((a: 1, b: 2, c: 3), 'a', 'b', 'c'); // (1, 2, 3)

// different map order + keys
// @debug get((b: 2, a: 1, c: 3), 'c', 'b', 'a'); // (3, 2, 1)
// @debug get((a: 1, b: 2, c: 3), 'b', 'c'); // (2, 3)

// key list
// @debug get(((a, b): 1, b: 2, c: 3), 'a', (a, b), 'c'); // (null, 1, 3)

// key map
// @debug get((b: 2, (a: b): 1, c: 3), 'a', (a: b), 'c'); // (null, 1, 3)

// nested key
// @debug get((a: (b: (c: (d: 1)))), (a, b, c , d)); // 1
