// Variables.
@forward 'dictionary.variables';
@use 'dictionary.variables' as variables;

// Modules.
@use '../../../map';

// Status: DONE
// The `dictionary.get()` function returns a global dictionary, optionally a dictionary from `$key`.
// @param `$key` An optional key to retrieve a dictionary from a global dictionary.
// @param `$default` The default returned value if dictionary is `null`.
// @returns The return value is a dictionary, optionally from `$key`. If `null` returned value is `$default`.
@function get($key: null, $default: null) {
  @return if(
    $key,
    if(
      type-of(map.get(variables.$dictionary, $key)) == map,
      map.get(variables.$dictionary, $key),
      $default
    ),
    variables.$dictionary
  );
}

// Examples.
// Gets the global dictionary
// @debug get(); // (word: translation)

// Gets the global dictionary of key (not translation)
// @debug get(word); // null

// Gets nested key
// variables.$dictionary: map.merge(variables.$dictionary, (test: (ok: (first: accept, second: do))));
// @debug get((test, ok)); // (first: accept, second: do)
// @debug get((word, wrong)); // null

// Gets the `$default`
// @debug get(word, exist); // exist
