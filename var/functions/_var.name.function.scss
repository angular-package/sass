// Sass.
@use 'sass:map';

// Variables.
@use '../var.variables';

// Functions.
@use '../../functions';
@use '../../list/get/get.map.function';

// Status: DONE
// https://developer.mozilla.org/en-US/docs/Web/CSS/var
// The `var.name()` function returns custom property(CSS variable.
// @param `$name` The `string` or `list` to set the CSS variable name.
// @param `$delimiter` Separator between each element in name of returned CSS variable.
// @param `$prefix` Prefix in `$name`. By default, it uses `prefix` of `$var` sass variable.
// @param `$suffix` Suffix in `$name`. By default, it uses `suffix` of `$var` sass variable.
// @returns The return value is CSS variable of `$name`.
@function name(
  $name,
  $dictionary: null,
  $delimiter: null,
  $prefix: null,
  $suffix: null
) {
  @return --#{functions.name(
    $name,
    if($dictionary and map.has-key($dictionary, var), map.get($dictionary, var), $dictionary) or (),
    $delimiter or map.get(var.$var, delimiter),
    $prefix or map.get(var.$var, prefix),
    $suffix or map.get(var.$var, suffix)
  )};
}

// Examples.
// @debug name(layout spacing, null, '-', s); // --s-layout-spacing
// @debug name(layout spacing, (), '-', s); // --s-layout-spacing

// dictionary
// @debug name(primary, (primary: pp), '-', s); // --s-pp
// @debug name(layout spacing, (layout: lay, spacing: spa), '-', 's'); // --s-lay-spa
// @debug name(layout spacing, (layout: l, spacing: s), '-', 's'); // --s-l-s
// @debug name(layout spacing, (prefix: spectre, suffix: end), '-'); // --spectre-layout-spacing-end

// dictionary passed in the name
// @debug name(layout spacing (layout: lay, spacing: spa), (), '-', s); // --s-lay-spa
// @debug name(layout spacing (layout: lay, spacing: spa), (prefix: spectre), '-'); // --spectre-lay-spa
// @debug name(layout spacing (layout: lay, spacing: spa), (var: (prefix: spectre)), '-'); // --spectre-lay-spa

// dictionary with the var key
// @debug name(layout spacing, (prefix: spectre, suffix: end), '-'); // --spectre-layout-spacing-end
