// Sass.
@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';

// Modules.
@use '../map';
@use '../string';
@use 'greater';
@use 'less';

// Functions.
@use 'comparison.equal.function' as *;

// Operators.
$operators: (
  // Equality operators.
  '===': meta.get-function(compatible, $module: math), // indicates use of `math.compatible()` that returns `bool`
  ('=', '=='): meta.get-function(equal), // indicates (value is equal) use of `equal()` that returns `bool`
  '~=': meta.get-function(index, $module: string), // indicates (string does contain) use of `string.index()` that returns `bool`
  ':==': meta.get-function(type-of, false, meta), // indicates use of `meta.type-of()` that returns `bool`

  // Length and type operators.
  ('(,)', '(:)'): meta.get-function(length, false, list), // indicates use of `list.length()` for `list` and `map` that returns `bool`

  // Inequality operators.
  '!=': meta.get-function(equal), // indicates (value is NOT equal) use of `equal()` that `bool`
  '!~=': meta.get-function(index, false, string), // indicates (string does not contain) use of `string.index()` that returns `bool`
  ':!=': meta.get-function(type-of, false, meta),  // indicates (type of the given value is not equal to the given type) use of `meta.type-of()` that returns `bool`
  '<': meta.get-function(than, $module: less), // indicates use of`less.than()` that returns `bool`
  '<=': (meta.get-function(than, $module: less), meta.get-function(equal)), // indicates use of`less.than()` and `equal()` that returns `bool`
  '>': meta.get-function(than, $module: greater), // indicates use of`greater.than()` that returns `bool`
  '>=': (meta.get-function(than, $module: greater), meta.get-function(equal)), // indicates use of`greater.than()` and `equal()` that returns `bool`
);
