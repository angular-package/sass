// Functions.
@use '../list.has.function';

// Status: DONE
// The `has.value()` function returns the bool indicating the list contains specified value.
// @param `$list`
// @param `$occurrence` all, any, only
// @param `$operator` '==', '!=', '~=', '!~=', ':==', ':!=', '>', '>=', '<', '<=',
//            '(:)', '(:)==', '(:)!=', '(:)>', '(:)>=', '(:)<', '(:)<=',
//            '(,)', '(,)==', '(,)!=', '(,)>', '(,)>=', '(,)<', '(,)<='
// @param `$value`
// @arbitrary `$values...`
@function value($list, $occurrence: any, $operator: '==', $value, $values...) {
  @return list.has($list, $occurrence, $operator, $value, $values...);
}

// Parameters.
// Arbitrary: (list, occurrence, operand): bool
// List: (list, occurrence operator operand): bool
// List: (list, (occurrence, operator, operand)...): bool
// Map: (list, (occurrence: value, operator: value, operand: value)...): bool

// Examples.
// ---
// equality operator == !=
// ---
// $occurrence: any
// number
// @debug value(('a', 'b', 3, any, last), any, '==', 3); // true
// @debug value(('a', 'b', 3, any, last), $value: 3); // true
// @debug value(('a', 'b', 3), any '!=' 4...); // true
// @debug value(('a', 'b', 3, any, last), any, '==', 12, 3); // true

// list parameter
// @debug value(('a', 'b', 3, any, last), any '==' 3...); // true
// @debug value(('a', 'b', 3, any, last), (any, '==', 3)...); // true

// map parameter
// @debug value(('a', 'b', 3, any, last), (occurrence: any, operator: '==', value: 3)...); // true

// string
// @debug value(('a', 'b', 3, any, last), any, '==', 'b'); // true
// @debug value(('a', 'b', 3, any, last), any, '==', any); // true
// @debug value(('a', 'b', 3, any, last), any '==' any...); // true
// @debug value(('a', 'b', 3, '4', null), any '==' null...); // true

// list
// @debug value(('a', 'b', (3, any), last), any, '==', (3, any)); // true
// @debug value(('a', 'b', (3, any), last, (3, any)), any, '==', (3, any)); // true

// map
// @debug value(('a', 'b', (a: 3, b: any), last), any, '==', (a: 3, b: any)); // true
// @debug value(('a', (a: 'b', c: d), (a: 3, b: any), last), any, '==', (a: 3, b: any)); // true

// null
// @debug value(('a', 'b', 3, '4', null), any, '==', null); // true
// @debug value(('a', 'b', 3, '4', ('a', 'b')), any '==' null...); // false


// $occurrence: only
// number
// @debug value((3, 3, 3), only '==' 3...); // true
// @debug value((2, 3, 3), only '==' 3...); // false

// list
// @debug value(('a', ('b', 3, any), last), any, '==', ('b', 3, any)); // true

// null
// @debug value((null, null, null, null), only '==' null...); // true
// @debug value((false, null, null, null), only '==' null...); // false

// @debug value(('a', 'b', 3, any, last), any '==' 3...); // true
// @debug value(('a', 'b', 3, '4', null), any '!=' null...); // true



// ---
// number relational operator >= > < <=
// ---
// > number
// @debug value(('a', 'b', 3, '4', null), any '>' 2...); // true
// @debug value(('a', 'b', 3, '4', null), any '<' 2...); // false

// >= number
// @debug value((12, 211, 35, 34, 312), only '>=' 2...); // true
// @debug value((12, 211, 35, 34, 312), only '>=' 13...); // false

// < number
// @debug value((12, 211, 35, 34, 312), only '<' 313...); // true
// @debug value((12, 211, 35, 34, 312), only '<' 211...); // false

// <= number
// @debug value(('a', 'b', 3, '4', null), any '<=' 3...); // true
// @debug value(('a', 'b', 3, '4', null), any '<=' 2...); // false



// ---
// string index operator ~= and !~=
// ---
// @debug value((('a', ' bold  king '), 'bold lizard', 3, any, (last, 4m, 5)), any '~=' 'bold'...); // true
// @debug value((('a', ' bold  king '), 'bold lizard', 3, any, (last, 4m, 5)), only '!~=' 'bold'...); // false



// ---
// type-of operator :== and :!=
// ---
// @debug value((('a', 'b'), 3, any, (last, 4m, 5)), any ':==' string...); // true
// @debug value((('a', 'b'), 3, any, (last, 4m, 5)), any ':==' number...); // true
// @debug value((('a', 'b'), 3, any, null, (last, 4m, 5)), any ':==' null...); // true
// @debug value((('a', 'b'), 3, any, false, (last, 4m, 5)), any ':==' bool...); // true
// @debug value((('a', 'b'), 3, any, red, (last, 4m, 5)), any ':==' color...); // true
// @debug value((('a', 'b'), 3, any, red, (last, 4m, 5)), any ':==' list...); // true
// @debug value((('a', 'b'), 3, (c: 213), any, red, (last, 4m, 5)), any ':==' map...); // true

// @debug value((('a', 'b'), 3, any, (last, 4m, 5)), only ':!=' string...); // false



// ---
// list length operator (,)== (,)!= (,)> (,)>= (,)< (,)<=
// ---
// @debug value((('a', 'b'), 3, any, (last, 4m, 5)), any '(,)==' 2...); // true
// @debug value((('a', 'b'), 3, any, (last, 4m, 5)), only '(,)==' 2...); // false
// @debug value((('a', 'b'), 3, any, (last, 4m)), only '(,)==' 2...); // false
// @debug value((('a', 'b'), (3, any), (last, 4m)), only '(,)==' 2...); // true

// list length > number
// @debug value((('a', 'b'), 3, any, (last, 4m, 5)), any '(,)>' 3...); // false

// list length < number
// @debug value((('a', 'b'), 3, any, (last, 4m, 5)), any '(,)<' 3...); // true
// @debug value((('a': 1, 'b': 2), 3, any, (last: 3, 4m: 5, 5: 5)), any '(,)<' 3...); // false



// ---
// map length operator (:)== (:)!= (:)> (:)>= (:)< (:)<=
// ---
// map length < number
// @debug value((('a': 1, 'b': 2), 3, any, (last: 3, 4m: 5, 5: 5)), any '(:)<' 3...); // true
// @debug value((('a': 1, 'b': 2), 3, any, (last: 3, 4m: 5, 5: 5)), any '(:)<' 2...); // false

// map length > number or >=
// @debug value((('a': 1, 'b': 2), 3, any, (last: 3, 4m: 5, 5: 5)), any '(:)>' 3...); // false
// @debug value((('a': 1, 'b': 2), 3, any, (last: 3, 4m: 5, 5: 5)), any '(:)>=' 2...); // true
