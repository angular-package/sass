// Sass.
@use 'sass:map';

// Modules.
@use '../dictionary';

// global dictionary defaults.
// dictionary.$dictionary: (
//   prefix: spectre,
//   suffix: end
// );

// Variables.
$-dictionary-example: (
  border: b,
  class: (prefix: class-prefix, separator: class-separator, suffix: class-suffix, calendars: (calendar: cal), labels: (label: lab)),
  color: c,
  general: (word: słowo, (wrapper, wrap): owijka, (technology, technologia): tech, color: c),
  outline: o,
  prefix: spectre,
  separator: '-',
  suffix: end,
  var: (prefix: var-prefix, suffix: var-suffix),
);

// merge
@debug dictionary.merge(null, $-dictionary-example);

// Set the dictionary.
@debug dictionary.set(example, $-dictionary-example);

// `get()`.
// @debug dictionary.get();
// @debug dictionary.get((example, general)); // (word: słowo, (wrapper, wrap): owijka, (technology, technologia): tech, color: c)

// `keys()`
// @debug dictionary.keys();

// `last-id()`
// @debug dictionary.last-id();

// `last-name()`
// @debug dictionary.last-name();

// `dictionary.merge()`
// @debug dictionary.merge();

// `dictionary.move()`
// @debug dictionary.move(var, class);

// `dictionary.pick()`
// @debug dictionary.pick(class, general);

// `dictionary.remove()`
// @debug dictionary.remove(border);


// @debug dictionary.merge(null, (test: (ok: (first: accept, second: do))));
// @debug dictionary.get((test, ok)); // (first: accept, second: do)
// @debug dictionary.get((word, wrong)); // null



// Gets nested key
// variables.$dictionary: map.merge(variables.$dictionary, (test: (ok: (first: accept, second: do))));
// @debug dictionary.merge(null, (test: (ok: (first: accept, second: do))));
// @debug dictionary.get((test, ok)); // (first: accept, second: do)
// @debug dictionary.get((word,@debug dictionary.set(example, $-dictionary-example);

// Examples.
// $-dictionary: (
//   (extra large, 'extra large', extra-large): xl,
//   (extra small, 'extra small', extra-small): xs,
//   class: (prefix: class-prefix, suffix: class-suffix),
//   large: lg,
//   medium: md,
//   prefix: spectre,
//   size: s,
//   small: sm,
//   suffix: end,
//   var: (prefix: var-prefix, suffix: var-suffix),
// );

// merge in `class` key
// @debug dictionary.merge(class, (prefix: spectre, suffix: end)); // (word: translation, class: (prefix: spectre, suffix: end))

// merge in nested (accordion, class) key
// @debug dictionary.merge((accordion, class), (prefix: spectre, suffix: end)); // (word: translation, class: (prefix: spectre, suffix: end), accordion: (class: (prefix: spectre, suffix: end)))




// Examples.
$-dictionary: (
  general: (word: słowo, (wrapper, wrap): owijka, technology: (action: akcja)),
  class: (prefix: spectre-prefix, suffix: spectre-suffix, calendars: (calendar: cal), labels: (label: lab)),
  prefix: spectre,
  suffix: end,
  separator: '--',
  var: (prefix: spectre, suffix: end)
);

//
// $-test: dictionary.merge(null, $-dictionary);



// Examples.
// Pick the key
// @debug dictionary.pick(general); // (general: (word: słowo, (wrapper, wrap): owijka, technology: (action: akcja)))

// Pick nested key
// @debug dictionary.pick((class, calendars)); // (calendars: (calendar: cal))

// Pick multiple keys
// @debug dictionary.pick(general, (class, calendars)); // (general: (word: słowo, (wrapper, wrap): owijka, technology: (action: akcja)), calendars: (calendar: cal))




// Sets translation of `small` as `sm`
// @debug dictionary.set(small, sm); // (word: translation, small: sm)
// @debug dictionary.set((small x,), small x); // (word: translation, small x: small x)

// set `var` dictionary
// @debug dictionary.set((var, prefix), spectre); // (word: translation, small x: small x, var: (prefix: spectre))

// number not working
// @debug dictionary.set(small, 5); // (word: translation)

// Sets the `class` dictionary
// @debug dictionary.set(class, map.get($-dictionary, class)); // (word: translation, small: sm, class: (prefix: class-prefix, separator: class-separator, suffix: class-suffix, calendars: (calendar: cal), labels: (label: lab)))


// Examples.
$-nested-dictionary: (
  general: (word: słowo, (wrapper, wrap): owijka, (technology, technologia): tech, color: c),
  class: (prefix: class-prefix, separator: class-separator, suffix: class-suffix, calendars: (calendar: cal), labels: (label: lab)),
  var: (prefix: var-prefix, suffix: var-suffix),
);
$-flatten-dictionary: (
  'extra small': xs,
  (extra large, extra-large): xl,
  border: b,
  color: c,
  delimiter: '-',
  outline: o,
  prefix: spectre,
  separator: '-',
  suffix: end,
);

// single dictionary
// @debug dictionary.translation(prefix, $-flatten-dictionary); // spectre
// @debug dictionary.translation(extra large, $-flatten-dictionary); // xl
// @debug dictionary.translation((extra large), $-flatten-dictionary); // xl

// multiple dictionaries
// @debug dictionary.translation(extra-large, $-nested-dictionary, $-flatten-dictionary); // xl
// @debug dictionary.translation('extra small', $-nested-dictionary, $-flatten-dictionary); // xs

// @debug dictionary.translation(prefix, $-nested-dictionary, $-flatten-dictionary); // spectre
// @debug dictionary.translation(outline, $-nested-dictionary, $-flatten-dictionary); // o
// @debug dictionary.translation(delimiter, $-nested-dictionary, $-flatten-dictionary); // -

// @debug dictionary.translation(word, $-nested-dictionary general, $-flatten-dictionary); // słowo
