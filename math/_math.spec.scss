// Sass.
@use 'sass:map';

// Modules.
@use '../math';
@use '../test';

$spec: (
  calculate: true,
  range-down: true,
  range-up: true,
  range: true,
  sort: true,
  strip-unit: true
);

// SECTION: math.range-down()
@include test.to-equal(
  'math.range-down()',
  (
    math.range-down(1, 1), // 1
    math.range-down(34, 34), // 34

    math.range-down(20, 15), // 20 19 18 17 16 15

    // step 0.1
    math.range-down(1, 0.1, 0.1), // 1 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1

    // step 2
    math.range-down(15, -3, 2), // 15 13 11 9 7 5 3 1 -1 -3

    // except
    math.range-down(35, 20, 1, 20 35), // 34 33 32 31 30 29 28 27 26 25 24 23 22 21

    // separator
    math.range-down(25, 20, $separator: comma), // 25, 24, 23, 22, 21, 20

    // null
    math.range-down(20, 35), // null
  ),
  (
    1, 34,
    20 19 18 17 16 15,
    1 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1,
    15 13 11 9 7 5 3 1 -1 -3,
    34 33 32 31 30 29 28 27 26 25 24 23 22 21,
    (25, 24, 23, 22, 21, 20),
    null
  ),
  map.get($spec, range-down),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}


// SECTION: math.range-up()
@include test.to-equal(
  'math.range-up()',
  (
    math.range-up(1, 1), // 1
    math.range-up(34, 34), // 34
    math.range-up(15, 20), // 15 16 17 18 19 20

    // step 0.1
    math.range-up(0.1, 1, 0.1), // 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1

    // step 2
    math.range-up(15, 30, 2), // 15 17 19 21 23 25 27 29

    // except
    math.range-up(20, 35, 1, 20 35), // 21 22 23 24 25 26 27 28 29 30 31 32 33 34

    // separator
    math.range-up(20, 25, $separator: comma), // 20, 21, 22, 23, 24, 25

    // null
    math.range-up(20, 35), // null
  ),
  (
    1, 34,
    15 16 17 18 19 20,
    0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1,
    15 17 19 21 23 25 27 29,
    21 22 23 24 25 26 27 28 29 30 31 32 33 34,
    (20, 21, 22, 23, 24, 25),
    20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35,
  ),
  map.get($spec, range-up),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';// SECTION: math.range-down()

  }
}


// SECTION: math.calculate()
@include test.to-equal(
  'math.calculate()',
  (
    // number
    math.calculate(15 '+' 13), // 28
    math.calculate(15 '-' 12), // 3
    math.calculate(55 '*' 17), // 935
    math.calculate(42 '/' 14), // 3
    math.calculate(15, '+', 13), // 28

    // var()
    math.calculate(15, '+', var(--age)), // calc(15 + var(--age))
    math.calculate(var(--age), '+', var(--age)), // calc(var(--age) + var(--age))
  ),
  ( 28, 3, 935, 3, 28, calc(15 + var(--age)), calc(var(--age) + var(--age))),
  map.get($spec, calculate),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}


// SECTION: math.range()
@include test.to-equal(
  'math.range()',
  (
    math.range(1, 1), // 1
    math.range(34, 34), // 34
    math.range(15, 20), // 15 16 17 18 19 20
    math.range(20, 15), // 20 19 18 17 16 15

    // step 2
    math.range(15, 20, 2), // 15 17 19

    // to lower step 2
    math.range(15, -3, 2), // 15 13 11 9 7 5 3 1 -1 -3

    // except
    math.range(15, -3, 1, 0), // 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 -1 -2 -3
    math.range(15, -3, 1, 0 15 14), // 13 12 11 10 9 8 7 6 5 4 3 2 1 -1 -2 -3

    // separator
    math.range(15, -3, 3, $separator: comma), // 15, 12, 9, 6, 3, 0, -3
  ),
  (
    1, 34,
    15 16 17 18 19 20,
    20 19 18 17 16 15,
    15 17 19,
    15 13 11 9 7 5 3 1 -1 -3,
    15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 -1 -2 -3,
    13 12 11 10 9 8 7 6 5 4 3 2 1 -1 -2 -3,
    (15, 12, 9, 6, 3, 0, -3)
  ),
  map.get($spec, range),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: math.sort()
$-numbers: (21, 12, 43, 64, 75, 36, 27, 18, 29, 510);

@include test.to-equal(
  'math.sort()',
  (
    math.sort(asc, $-numbers...), // 12 18 21 27 29 36 43 64 75 510
    math.sort(desc, $-numbers...), // 510 75 64 43 36 29 27 21 18 12
  ),
  (
    12 18 21 27 29 36 43 64 75 510,
    510 75 64 43 36 29 27 21 18 12
  ),
  map.get($spec, sort),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}

// SECTION: math.strip-unit()
@include test.to-equal(
  'math.strip-unit()',
  (
    math.strip-unit(10px), // 10
    math.strip-unit(null), // null
    math.strip-unit(false), // false
  ),
  ( 10, null, false ),
  map.get($spec, strip-unit),
) using($id, $passed, $failed, $max, $spec, $summary, $done) {
  @debug $spec;
  @if $done {
    @debug $summary;
    @debug '---';
  }
}
