// Sass.
@use 'sass:list';
@use 'sass:meta';

// Functions.
@use '../../list/list.to-map.function' as *;
@use '../../selector/selector.class.function' as *;
@use '../../selector/selector.nest.function' as *;
@use '../../variant/update/update.property.function';

// Mixins.
@use '../../list/list.each.mixin' as *;
@use '../class.content.mixin' as class;
@use './variant.class-value.mixin' as *;

// Modules.
@use '../../function';
@use '../../map';
@use '../../values';

// Status: DONE
// The `variant.property()` mixin sets class `$variant` with `$pseudo-class` translated with `$dictionary`, and called by `$function`.
// @param `$variant` Class variant with `$pseudo-class` called by `$function`.
// @param `$pseudo-class` Pseudo class for class `$variant`.
// @param `$dictionary` Dictionary to translate class `$variant`.
// @param `$function` The function to set class `$variant`.
// @param `$content-type`
// @param `$modifier`
@mixin property(
  $variant,
  $pseudo-class: (),
  $dictionary: null,
  $function: meta.get-function(class),
  $content-type: list,
  $modifier: null,
) {
  @if type-of($variant) == map {
    $content-keys: (
      class,
      (2: value, 3: property, 4: property),
      (3: value, 4: value-class, 5: attribute),
      (4: value, 5: value-class),
      value,
      variant
    );
    @each $class, $class-value in $variant {
      $property: null;
      @if type-of($class) == map {
        @each $-class, $-property in $class {
          $class: $-class;
          $property: $-property;
        }
      }
      @if type-of($class-value) == map {
        @each $value-class, $value in $class-value {
          @if not (type-of($value) == map) {
            @include each($class) using($class) {
              // FEATURE: Works fine.
              @include each($value) using($value) {
                @include each($value-class) using($value-class) {
                  @include class.content(
                    values.join(
                      if(&, '&', ()),
                      map.get($modifier, (class, prefix), null),
                      $class,
                      map.get($modifier, (class, attribute), null),
                      $value-class,
                      map.get($modifier, (class, suffix), null),
                    ),
                    $pseudo-class,
                    $dictionary,
                    $function
                  ) {
                    $-property: $property or $class;
                    @if $modifier {
                      $-property: update.property($-property, $modifier);
                    }

                    // values to pass into the @content
                    $values: ($class, $-property, null, $value-class, $value, ($value-class: $value));

                    // arguments
                    $arguments: if(
                      $content-type == map,
                      to-map($values, $content-keys...),
                      values.combine((separator: comma), $values...)
                    );
                    @if type-of($arguments) == list {
                      @content($arguments...);
                    } @else {
                      @content($arguments);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// Examples.
// @include property(((padding-top, margin-bottom): (1: unit 1, 2: unit 2)), $content-type: map) using($resolved) {
//   @debug $resolved;

//   #{map.get($resolved, property)}: map.get($resolved, value);
// }

// @include property(((top: padding): (1: unit 1, 2: unit 2)), $content-type: map) using($resolved) {
//   @debug $resolved;

//   #{map.get($resolved, property)}: map.get($resolved, value);
// }

// @include property(((top right, bottom left): (padding: unit 1, margin: unit 2)), $content-type: map) using($resolved) {
//   @debug $resolved;

//   padding-#{map.get($resolved, property)}: map.get($resolved, value);
// }

// @include property(((padding, margin): (1: unit 1, 2: unit 2)), $content-type: map) using($resolved) {
//   @debug $resolved;
// }

// @include property(((top: padding): (1: unit 1, 2: unit 2)), $content-type: map) using($resolved) {
//   @debug $resolved;

//   #{map.get($resolved, property)}: map.get($resolved, value);
// }

// @include property(((padding, margin): (1: unit 1, 2: unit 2)), $content-type: map) using($resolved) {
//   @debug $resolved;

//   #{map.get($resolved, property)}: map.get($resolved, value);
// }

// @include property(
//   ((top, bottom): (1: unit 1, 2: unit 2)),
//   $content-type: map,
//   $modifier: (class: (prefix: border, attribute: color, suffix: test), property: (name: border, attribute: color))
// ) using($resolved) {
//   @debug $resolved;

//   #{map.get($resolved, property)}: map.get($resolved, value);
// }

// @include property(
//   ((top, bottom): (1: unit 1, 2: unit 2)),
//   $content-type: map,
//   $modifier: (class: (prefix: border, attribute: color, suffix: test), property: (name: border, attribute: color))
// ) using($resolved) {
//   @debug $resolved;

//   #{map.get($resolved, property)}: map.get($resolved, value);
// }
