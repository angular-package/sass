// Sass.
@use 'sass:map';

// Modules.
@use '../function';
@use '../meta';
@use '../property';
@use '../selector';
@use '../var';

// Mixins.
@use 'property.variant.mixin' as *;


function.$functions: map.merge(function.$functions, (
  selector: meta.module-functions("selector"),
  var: meta.module-functions("var")
));

property.$type-function: map.merge(property.$type-function, (list: --var-get));


// Examples.
// FEATURE: single variant: (property/class: class/value)
// @include variant((float: right));
// .float-right {
//   float: right;
// }

// FEATURE: single variant: (property/class: class/value + important)
// @include variant((float: right '!important'));
// .float-right {
//   float: right !important;
// }

// FEATURE: single variant: (property/class: class/value, property/class: class/value) + important + pseudo-class
// @include variant((float: right), true, (':hover', ':visited'));
// .float-right:hover, .float-right:visited {
//   float: right !important;
// }

// FEATURE: single variant: (property/class: class/value, property/class: class/value) + important + pseudo-class + dictionary
// @include variant((float: right), true, (':hover', ':visited'), (float: f, right: r));
// .f-r:hover, .f-r:visited {
//   float: right !important;
// }

// FEATURE: single variant: (property/class: class/value + adjust + important, property/class: class/value)
// @include variant((float: --var-get (right, ('+' 15)) '!important'));
// .float-right {
//   float: calc(var(--s-right) + 15) !important;
// }

// FEATURE: multiple variants: (property/class: class/value + important, property/class: class/value)
// @include variant((float: right '!important', text align: left));
// .float-right {
//   float: right !important;
// }
// .text-align-left {
//   text-align: left;
// }

// FEATURE: multiple variants: (property/class: class/value, class/value)
// @include variant((float: (right, left)));
// .float-right {
//   float: right;
// }
// .float-left {
//   float: left;
// }

// FEATURE: multiple variants: (property/class: class/value, class/value + important)
// @include variant((float: (right, left !important)));
// .float-right {
//   float: right;
// }
// .float-left {
//   float: left !important;
// }

// FEATURE: multiple variants: ((property/class, property/class): (class/value, class/value)) + important + pseudo-class
// @include variant(((float, text align): (right, left)), true, (':hover', ':visited'));
// .float-right:hover, .float-right:visited {
//   float: right !important;
// }
// .text-align-right:hover, .text-align-right:visited {
//   text-align: right !important;
// }
// .float-left:hover, .float-left:visited {
//   float: left !important;
// }
// .text-align-left:hover, .text-align-left:visited {
//   text-align: left !important;
// }

// FEATURE: multiple variants: ((property/class, property/class): (class/value, class/value)) + important + pseudo-class + dictionary
// @include variant(((float, text align): (right, left)), true, ':hover', (float: f));
// .f-right:hover {
//   float: right !important;
// }
// .text-align-right:hover {
//   text-align: right !important;
// }
// .f-left:hover {
//   float: left !important;
// }
// .text-align-left:hover {
//   text-align: left !important;
// }

// FEATURE: multiple variants: ((property/class,): (class/value, class/value + important))
// @include variant(((position,): (absolute, fixed, relative '!important', sticky '!important')));
// .position-absolute {
//   position: absolute;
// }
// .position-fixed {
//   position: fixed;
// }
// .position-relative {
//   position: relative !important;
// }
// .position-sticky {
//   position: sticky !important;
// }

// @include variant(((position,): (absolute '!important', fixed, relative, sticky)));
// .position-absolute {
//   position: absolute !important;
// }
// .position-fixed {
//   position: fixed;
// }
// .position-relative {
//   position: relative;
// }
// .position-sticky {
//   position: sticky;
// }

// @include variant(( flex direction: ( column, row ) ));
// .flex-direction-column {
//   flex-direction: column;
// }
// .flex-direction-row {
//   flex-direction: row;
// }

// FEATURE: multiple variants: (property/class: (class: value , class: value))
// @include variant((align items: (center: center, start: flex-start, end: flex-end)));
// .align-items-center {
//   align-items: center;
// }
// .align-items-start {
//   align-items: flex-start;
// }
// .align-items-end {
//   align-items: flex-end;
// }

// FEATURE: multiple variants: (class/value, (class: value), class/value)
// justify content
// @include variant((
//   justify content: (
//     // .justify-content-center,
//     center,

//     // .justify-content-end,
//     (end: flex-end),

//     // .justify-content-space-around,
//     space-around,

//     // .justify-content-space-around,
//     space-between,

//     // .justify-content-space-evenly,
//     space-evenly,

//     // .justify-content-start,
//     (start: flex-start)
//   )
// ));
// .justify-content-center {
//   justify-content: center;
// }
// .justify-content-end {
//   justify-content: flex-end;
// }
// .justify-content-space-around {
//   justify-content: space-around;
// }
// .justify-content-space-between {
//   justify-content: space-between;
// }
// .justify-content-space-evenly {
//   justify-content: space-evenly;
// }
// .justify-content-start {
//   justify-content: flex-start;
// }

// FEATURE: variant: (class/property, (class: value))
// @include variant((border: (2: unit 2)));
// .border-2 {
//   border: unit 2;
// }

// @include variant((border: (2: (unit 2) ())));
// @include variant((border: (2: --var-get (unit 2))));
// .border-2 {
//   border: var(--s-unit-2);
// }

// FEATURE: variant: (class/property, (class: value, variant))
// @include variant((border: (1: unit 1, 2: unit 2)));
// .border-1 {
//   border: unit 1;
// }
// .border-2 {
//   border: unit 2;
// }

// @include variant((border: (1: (unit 1) (unit 2), 2: --var-get (unit 2))));
// .border-1 {
//   border: var(--s-unit-1) var(--s-unit-2);
// }
// .border-2 {
//   border: var(--s-unit-2);
// }

// @include variant((border: (unit 1: --var-get (unit 1) '!important', unit 2: --var-get (unit 2))));
// @include variant((border: (unit 1: (unit 1) '!important', unit 2: --var-get (unit 2))));
// .border {
//   border: var(--s-unit-1) !important;
// }
// .border {
//   border: var(--s-unit-2);
// }

// @include variant((border: (unit 1: --var-get (unit 1))), true);
// .border-unit-1 {
//   border: var(--s-unit-1) !important;
// }

// @include variant((border: (one 1: --var-get (unit 1), two 2: --var-get (unit 2))));
// .border-one-1 {
//   border: var(--s-unit-1);
// }
// .border-two-2 {
//   border: var(--s-unit-2);
// }

// FEATURE: (class/property: (property/class: (class: value, variant)))
// @include variant((border: (radius: (1: --var-get (unit 1), 2: --var-get (unit 2) !important))));
// .border-radius-1 {
//   border-radius: var(--s-unit-1);
// }
// .border-radius-2 {
//   border-radius: var(--s-unit-2) !important;
// }

// FEATURE: (class/property: (property/class: (class: value, variant)))
// @include variant((border: ((radius, color): (1: unit 1, two: unit 2))));
// .border-radius-1 {
//   border-radius: unit 1;
// }
// .border-radius-two {
//   border-radius: unit 2;
// }
// .border-color-1 {
//   border-color: unit 1;
// }
// .border-color-two {
//   border-color: unit 2;
// }

// FEATURE: (class/property: ((property/class): ((class): value, variant)))
// @include variant((font: (size: ((xxs, xs, sm, md, lg, xl, xxl): --var-get (unit 1), two: --var-get (unit 2)))));
// .font-size-xxs, .font-size-xs, .font-size-sm, .font-size-md, .font-size-lg, .font-size-xl, .font-size-xxl {
//   font-size: var(--s-unit-1);
// }
// .font-size-two {
//   font-size: var(--s-unit-2);
// }

// @include variant((border: (radius: (1: --var-get (unit 1), two: --var-get (unit 2)))));
// .border-radius-1 {
//   border-radius: var(--s-unit-1);
// }
// .border-radius-two {
//   border-radius: var(--s-unit-2);
// }

// @include variant((border: (top: (1: --var-get (unit 1)))));
// .border-top-1 {
//   border-top: var(--s-unit-1) !important;
// }

// @include variant((border: ((top left, right bottom): (1: --var-get (unit 1)))));
// .border-top-left-1 {
//   border-top-left: var(--s-unit-1) !important;
// }
// .border-right-bottom-1 {
//   border-right-bottom: var(--s-unit-1) !important;
// }

// @include variant((border: (((top, bottom): color): (1: --var-get (unit 1), 3: --var-get (unit 3)))));
// @include variant((border: (--selector-nest ((top, bottom), color): (1: --var-get (unit 1), 3: --var-get (unit 3)))));
// .border-top-color-1 {
//   border-top-color: var(--s-unit-1);
// }
// .border-top-color-3 {
//   border-top-color: var(--s-unit-3);
// }
// .border-bottom-color-1 {
//   border-bottom-color: var(--s-unit-1);
// }
// .border-bottom-color-3 {
//   border-bottom-color: var(--s-unit-3);
// }

// @include variant(((border, margin): ((top left, right bottom): (1: --var-get (unit 1), two: --var-get (unit 2)))));
// .border-top-left-1 {
//   border-top-left: var(--s-unit-1);
// }
// .border-top-left-two {
//   border-top-left: var(--s-unit-2);
// }
// .border-right-bottom-1 {
//   border-right-bottom: var(--s-unit-1);
// }
// .border-right-bottom-two {
//   border-right-bottom: var(--s-unit-2);
// }
// .margin-top-left-1 {
//   margin-top-left: var(--s-unit-1);
// }
// .margin-top-left-two {
//   margin-top-left: var(--s-unit-2);
// }
// .margin-right-bottom-1 {
//   margin-right-bottom: var(--s-unit-1);
// }
// .margin-right-bottom-two {
//   margin-right-bottom: var(--s-unit-2);
// }

// @include variant((padding: ((): ((xl, xs, sm): --var-get (unit 1), 2: --var-get (unit 2)))));
// .padding-xl, .padding-xs, .padding-sm {
//   padding: var(--s-unit-1);
// }
// .padding-2 {
//   padding: var(--s-unit-2);
// }

// multiple properties + single variant + single side
// @include variant(((margin, padding): (top: (1: --var-get (unit 1)))));
// .margin-top-1 {
//   margin-top: var(--s-unit-1);
// }
// .padding-top-1 {
//   padding-top: var(--s-unit-1);
// }

// multiple properties + single variant + multiple sides
// @include variant(((margin, padding): ((top, bottom): (1: --var-get (unit 1)))));
// .margin-top-1 {
//   margin-top: var(--s-unit-1);
// }
// .margin-bottom-1 {
//   margin-bottom: var(--s-unit-1);
// }
// .padding-top-1 {
//   padding-top: var(--s-unit-1);
// }
// .padding-bottom-1 {
//   padding-bottom: var(--s-unit-1);
// }

// multiple properties + multiple variants + multiple sides
// @include variant(((margin, padding): ((top, bottom): (1: --var-get (unit 1), 3: --var-get (unit 3)))));
// .margin-top-1 {
//   margin-top: var(--s-unit-1);
// }
// .margin-top-3 {
//   margin-top: var(--s-unit-3);
// }
// .margin-bottom-1 {
//   margin-bottom: var(--s-unit-1);
// }
// .margin-bottom-3 {
//   margin-bottom: var(--s-unit-3);
// }
// .padding-top-1 {
//   padding-top: var(--s-unit-1);
// }
// .padding-top-3 {
//   padding-top: var(--s-unit-3);
// }
// .padding-bottom-1 {
//   padding-bottom: var(--s-unit-1);
// }
// .padding-bottom-3 {
//   padding-bottom: var(--s-unit-3);
// }

// FEATURE: (class/property: ((class/property, class/property): (class/property: value, class/property: value)))
// @include variant((
//   (outline border): (
//     (top-left, bottom-right): (
//       radius: 30px,
//       color: --var-get (primary color dark)
//     ),
//   )), $dictionary: (radius: r));
// .outline-border-top-left-r {
//   outline-border-top-left: 30px;
// }
// .outline-border-top-left-color {
//   outline-border-top-left: var(--s-primary-color-dark);
// }
// .outline-border-bottom-right-r {
//   outline-border-bottom-right: 30px;
// }
// .outline-border-bottom-right-color {
//   outline-border-bottom-right: var(--s-primary-color-dark);
// }

// FEATURE: (class/property: ((class/property, class/property): (class: (property: value, property: value))))
// @include variant((
//   border: (
//     (top left, bottom left): (
//       1: (
//         radius: 20px,
//         color: red
//       )
//     )
//   )
// ));
// .border-top-left-1 {
//   border-top-left-radius: 20px;
//   border-top-left-color: red;
// }
// .border-bottom-left-1 {
//   border-bottom-left-radius: 20px;
//   border-bottom-left-color: red;
// }

// dictionary
// @include variant(((margin, padding): ((top, bottom): (1: --var-get (unit 1), 3: --var-get (unit 3)))), false, ':hover', (margin: m, padding: p));
// .m-top-1:hover {
//   margin-top: var(--s-unit-1);
// }
// .m-top-3:hover {
//   margin-top: var(--s-unit-3);
// }
// .m-bottom-1:hover {
//   margin-bottom: var(--s-unit-1);
// }
// .m-bottom-3:hover {
//   margin-bottom: var(--s-unit-3);
// }
// .p-top-1:hover {
//   padding-top: var(--s-unit-1);
// }
// .p-top-3:hover {
//   padding-top: var(--s-unit-3);
// }
// .p-bottom-1:hover {
//   padding-bottom: var(--s-unit-1);
// }
// .p-bottom-3:hover {
//   padding-bottom: var(--s-unit-3);
// }

// Variant.
// @include variant((
//   border: (
//     (top-left, bottom-right): (
//       radius: (radius: 5%),
//     )
//   ),
//   scroll: (
//     ((margin, padding): block): (
//       start 5: (start: 5%),
//       end 10: (end: 10%),
//     )
//   )
// ));
// .border-top-left-radius {
//   border-top-left-radius: 5%;
// }
// .border-bottom-right-radius {
//   border-bottom-right-radius: 5%;
// }
// .scroll-margin-block-start-5 {
//   scroll-margin-block-start: 5%;
// }
// .scroll-margin-block-end-10 {
//   scroll-margin-block-end: 10%;
// }
// .scroll-padding-block-start-5 {
//   scroll-padding-block-start: 5%;
// }
// .scroll-padding-block-end-10 {
//   scroll-padding-block-end: 10%;
// }
