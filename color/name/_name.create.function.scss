// Sass.
@use 'sass:list';
@use 'sass:map';

// Variables.
@use '../../var/var.variables' as variables;

// Modules.
@use '../../string';

// Module functions.
@use 'indicator/indicator.add.function';

// Status: DONE
// The `color.name-create()` function creates color name with `color` indicator and `$shade`.
// @param `$name` Color name of `string` or `list` type.
// @param `$type` Indicates type of color
// @param `$delimiter` String type delimiter to split `$name` and `$type`.
// @param `$shade` (dark, light)
// @param `$indicator`
// @param `$separator`
// @returns The return value is color name with `.
@function create(
  $name,
  $type,
  $delimiter: map.get(variables.$var, delimiter),
  $shade: (dark, light),
  $indicator: color,
) {
  // Remove `$delimiter` if `$name` is `string` type.
  @if type-of($name) == string {
    $name: if($delimiter and string.length($delimiter) > 0, string.split($name, $delimiter), ($name,));
    $name: list.join((), $name, space);
  }
  @if type-of($type) == string {
    $type: if($delimiter and string.length($delimiter) > 0, string.split($type, $delimiter), ($type,));
  }

  // Add color indicator to `$name`.
  $name: indicator.add($name, $shade, $indicator);

  // Add type to `$name`.
  $name: if($type, list.join($name, $type, space), list.join((), $name, space));

  // Returns.
  @return $name;
}

// Examples.
// $-delimiter: '-';

// @debug create(primary dark, hue); // primary color dark hue

// @debug create(secondary light dark, saturation); // secondary light color dark saturation
// @debug create(secondary dark light, saturation); // secondary dark color light saturation

// delimiter
// @debug create(primary-dark, hue, $-delimiter); // primary color dark hue
// @debug create(secondary-dark-light, saturation, $-delimiter); // secondary dark color light saturation
// @debug create(primary-dark, hue, $-delimiter);

// multiple usage
// @debug create(create(primary-dark, hue, $-delimiter), hue, $-delimiter); // primary color dark hue hue
