// Sass.
@use 'sass:list';
@use 'sass:map';

// Functions.
@use '../list/list.append.function' as list-append;

// Status: DONE
// The `map.has-keys()` function checks whether `$map` contains required `$key` and additional `$keys`.
// @param `$map` A map to check whether it has required `$key` and additional `$keys`.
// @param `$key` Required key to check whether `$map` contains.
// @arbitrary `$keys...` Additional keys to check whether `$map` contains.
// @returns The returned value is a `bool` indicating `$map` contains `$key` and additional `$keys`.
@function has-keys($map, $key, $keys...) {
  $result: ();
  @each $key in list-append.append((), $key, comma, $keys...) {
    $result: list.append($result, map.has-key($map, $key));
  }
  @return not list.index($result, false) and true;
}

// Examples.
// $-map: (list1: (), list2: (), a b c d e f: value, a: (b: (c: (d: e))), any: true, all: false, separator: auto, bracketed: false, method: join, null: false);

// string key
// @debug has-keys($-map, list1, list2); // true

// string keys
// @debug has-keys($-map, list1, list2); // true
// @debug has-keys($-map, list1, list2, wrong); // false
// @debug has-keys($-map, list1, list3); // false

// list key
// @debug has-keys($-map, a b c d e f); // true
// @debug has-keys($-map, a b c d e); // false
// @debug has-keys($-map, a b c d e f, bracketed); // true
// @debug has-keys($-map, a b c d e, bracketed); // false
