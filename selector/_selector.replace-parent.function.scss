// Variables.
@use 'selector.variables' as variables;

// Modules.
@use '../list';
@use '../string';

// Status: DONE
// The `selector.replace-parent()` function replaces parent/selector, by default __PARENT__ with parent selector '&' for `selector.nest()` function.
// @param `$selector` The selector in which `$parent-placeholder` is replaced by parent selector `&`.
// @param `$replace` Select `selector` to replace '&' with __PARENT__ or `placeholder` to replace __PARENT__ with '&'.
// @param `$parent-placeholder` Placeholder for parent selector '&'.
// @returns The return value is `$selector` with `$parent-placeholder` replaced by parent selector '&' or inverse.
@function replace-parent($selector, $replace: placeholder, $parent-placeholder: variables.$parent-placeholder) {
  @if (type-of($selector) == list or type-of($selector) == arglist) and list.length($selector) > 0 {
    @if list.type($selector, 1) == string {
      $selector: list.replace-string(
        $selector,
        if($replace == placeholder, ($parent-placeholder, '&'), ('&', $parent-placeholder))...
      );
    } @else {
      $i: 1;
      @each $value in $selector {
        @if type-of($value) == list and list.length($value) > 0 {
          $selector: list.set-nth($selector, $i, list.replace-string(
            $value,
            if($replace == placeholder, ($parent-placeholder, '&'), ('&', $parent-placeholder))...
          ));
        }

        $i: $i + 1;
      }
    }
  } @else if type-of($selector) == string {
    $selector: string.replace(
      $selector,
      all,
      if($replace == placeholder, ($parent-placeholder, '&'), ('&', $parent-placeholder))...
    );
  }
  @return $selector;
}


// Examples: placeholder.
// string
// @debug replace-parent('__PARENT__card'); // "&card"
// @debug replace-parent('__PARENT__card__PARENT__'); // "&card&"

// list
// @debug replace-parent(('__PARENT__', 'card')); // "&", "card"
// @debug replace-parent(('__PARENT__', 'card', '__PARENT__')); // "&", "card", "&"
// @debug replace-parent(('__PARENT__card', '__PARENT__card', '__PARENT__card')); // "&card", "&card", "&card"

// list in list
// @debug replace-parent((('__PARENT__', 'bla'), 'card')); // ("&", "bla"), "card"
// @debug replace-parent(('__PARENT__' 'bla', __PARENT__ 'card')); // ("&", "bla"), (&, "card")
// @debug replace-parent(('__PARENT__' 'first', __PARENT__ + 'second') (__PARENT__ third)); // ("&" "first", &second) (& third)
// @debug replace-parent((('__PARENT__card', '__PARENT__card', '__PARENT__card'), )); // (("&card", "&card", "&card"),)

// not replaced
// @debug replace-parent(('__PARENT__', 'card'), placeholder, __OTHER__); // "__PARENT__", "card"

// different placeholder
// @debug replace-parent(('__OTHER__', 'card'), placeholder, __OTHER__); // "&", "card"




// Examples: selector.
// string
// @debug replace-parent('&border-width', selector); // __PARENT__border-width

// list
// @debug replace-parent('&' 'border' 'width', selector); // "__PARENT__" "border" "width"
// @debug replace-parent('&border' 'width', selector); // "__PARENT__border" "width"
// @debug replace-parent('&.border-width', selector); // __PARENT__.border-width
// @debug replace-parent('&' '.' 'class', selector); // "__PARENT__" "." "class"
// @debug replace-parent('&.' 'border' 'width', selector); // "__PARENT__." "border" "width"
// @debug replace-parent('&.' 'border' 'width' '&', selector); // "__PARENT__." "border" "width" "__PARENT__"
