// Sass.
@use 'sass:list';
@use 'sass:map';

// Variables.
@use 'function.variables' as variables;

// Functions.
@use 'function.is.function';

// Status: DONE
// The `function.has()` function checks whether `$value` contains existing function or from `$functions` in a form `module-function args...`.
// @param `$value` Value to check against existence function in a form `module-function args...`.
// @param `$prefix` Prefix of the function in `$value`.
// @param `$functions` Additional functions of `map` type to check in `$value`.
// @returns The return value is a `bool` indicating whether `$value` contains existing function.
@function has($value, $prefix: variables.$prefix, $functions: variables.$functions) {
  @if type-of($value) == list or type-of($value) == map {
    @if type-of($value) == map {
      $value: map.keys($value);
    }
    @for $i from 1 through list.length($value) {
      @if function.is(list.nth($value, $i), $prefix, $functions) {
        @return $i;
      }
    }
  }
  @return false;
}

// Alias name.
@function value-has($value, $prefix: variables.$prefix, $functions: variables.$functions) {
  @return has($value, $prefix, $functions);
}

// Examples.
// list
// @debug has(selector-nest (unit 2)); // 1
// @debug has((unit 2) selector-nest); // 2
// @debug has(3px solid --selector-nest (primary dark)); // 3

// map
// @debug has((selector-nest: (unit 2))); // 1

// prefix
// @debug has(__selector-nest (unit 2), __); // 1
// @debug has(-_-selector-nest (unit 2), -_-); // 1
