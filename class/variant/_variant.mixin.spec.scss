// Sass.
@use 'sass:list';
@use 'sass:map';
@use 'sass:selector';

// Mixins.
@use 'variant.mixin' as *;

// @include variant(((color: (background, color)): primary dark)) using($resolved...) {
//   @debug $resolved;

//   width: auto;
// }

// @include variant((color: primary dark)) using($resolved...) {
//   @debug $resolved;

//   width: auto;
// }

// @include variant(((color basic: (red, green)))) using($resolved...) {
//   @debug $resolved;

//   width: auto;
// }

// @include variant((((background basic: (background-color, color)): (red, green)))) using($resolved...) {
//   @each $property in list.nth($resolved, 2) {
//     #{$property}: list.nth($resolved, 3);
//   }
// }

// @include variant(((color red: (light: red light, dark: red dark)))) using($resolved...) {
//   // @debug list.nth($resolved, 4);
//   color: list.nth($resolved, 4);
// }

// @include variant(((color basic: (red: (light: red light, dark: red dark))))) using($resolved...) {
//   // @debug list.nth($resolved, 4);
//   @debug $resolved;

//   color: list.nth($resolved, 5);
// }

// @include variant((("green", "active"): success color)) using($resolved...) {
//   @debug $resolved;

//   width: auto;
// }

// @include variant(((color basic: (red: (light: red light, dark: red dark))))) using($resolved...) {
//   color: list.nth($resolved, 5);
// }

// Examples.
// @include variant((padding: unit 1)) using($property, $value) {
//   #{$property}: #{$value};
// }
// .padding {
//   padding: unit 1;
// }

// @include variant((padding-bottom: unit 1)) using($property, $value) {
//   #{$property}: #{$value};
// }
// .padding-bottom {
//   padding-bottom: unit 1;
// }

// @include variant((padding: (unit 1, unit 2 '!important'))) using($property, $value) {
//   #{$property}: #{$value};
// }
// .padding {
//   padding: unit 1;
// }
// .padding {
//   padding: unit 2 !important;
// }

// @include variant((padding: (unit 1) (unit 2))) using($property, $value) {
//   #{$property}: #{$value};
// }
// .padding {
//   padding: unit 1 unit 2;
// }

// @include variant((padding: unit 1, margin: unit 2)) using($property, $value) {
//   #{$property}: #{$value};
// }
// .padding {
//   padding: unit 1;
// }
// .margin {
//   margin: unit 2;
// }

// @include variant(((padding, margin): unit 1)) using($property, $value) {
//   #{$property}: #{$value};
// }
// .padding {
//   padding: unit 1;
// }
// .margin {
//   margin: unit 1;
// }

// @include variant(((padding-bottom, padding-top): unit 1)) using($property, $value) {
//   #{$property}: #{$value};
// }
// .padding-bottom {
//   padding-bottom: unit 1;
// }
// .padding-top {
//   padding-top: unit 1;
// }

// @include variant(((padding, margin): (unit 1, unit 2))) using($property, $value) {
//   #{$property}: #{$value};
// }
// .padding {
//   padding: unit 1;
// }
// .margin {
//   margin: unit 1;
// }
// .padding {
//   padding: unit 2;
// }
// .margin {
//   margin: unit 2;
// }

// @include variant((padding (top, bottom): unit 1)) using($property, $value) {
  // @each $property in selector.nest($property...) {
  //   #{$property}: #{$value};
  // }
  // padding top: unit 1;
  // padding bottom: unit 1;

  // or
  // padding-right: 0;
  // padding-left: 0;
// }

// @include variant((padding (small, large): unit 1)) using($property, $value) {
//   padding: #{$value};
// }
// .padding-small, .padding-large {
//   padding: unit 1;
// }

// @include variant(((outline, inline) padding: unit 1)) using($property, $value) {
//   padding: #{$value};
// }
// .outline-padding, .inline-padding {
//   padding: unit 1;
// }

// @include variant((padding: (unit 1, unit 2))) using($property, $value) {
//   #{$property}: #{$value};
// }
// .padding {
//   padding: unit 1;
// }
// .padding {
//   padding: unit 2;
// }

// @include variant(((padding, margin): (unit 1, unit 2))) using($property, $value) {
//   #{$property}: #{$value};
// }
// .padding {
//   padding: unit 1;
// }
// .margin {
//   margin: unit 1;
// }
// .padding {
//   padding: unit 2;
// }
// .margin {
//   margin: unit 2;
// }

// @include variant((padding: ((unit 1) (unit 2)))) using($property, $value) {
//   #{$property}: #{$value};
// }
// .padding {
//   padding: unit 1 unit 2;
// }

// @include variant(((padding, margin): ((unit 1) (unit 2)))) using($property, $value) {
//   #{$property}: #{$value};
// }
// .padding {
//   padding: unit 1 unit 2;
// }
// .margin {
//   margin: unit 1 unit 2;
// }

// @include variant((padding top: (size one: unit 1))) using($class, $property, $value-class, $value, $variant) {
//   #{$property}: #{$value};
// }
// .padding-top-size-one {
//   padding top: unit 1;
// }

// @include variant((padding bottom: (size one: unit 1, size two: unit 2))) using($class, $property, $value-class, $value, $variant) {
//   #{$property}: #{$value};
// }
// .padding-bottom-size-one {
//   padding bottom: unit 1;
// }
// .padding-bottom-size-two {
//   padding bottom: unit 2;
// }

// @include variant(((padding, margin): (1: unit 1, 2: unit 2))) using($class, $property, $value-class, $value, $variant) {
//   #{$property}: #{$value};
// }
// .padding-1 {
//   padding: unit 1;
// }
// .margin-1 {
//   margin: unit 1;
// }
// .padding-2 {
//   padding: unit 2;
// }
// .margin-2 {
//   margin: unit 2;
// }

// @include variant(((padding, margin): ((): (unit 1, unit 2)))) using($class, $property, $side, $value, $variant) {
//   #{$property}: #{$value};
// }
// .padding {
//   padding: unit 1;
// }
// .padding {
//   padding: unit 2;
// }
// .margin {
//   margin: unit 1;
// }
// .margin {
//   margin: unit 2;
// }

// @include variant(((padding, margin): (top: (unit 1, unit 2)))) using($class, $property, $side, $value, $variant) {
//   #{$property}-#{$side}: #{$value};
// }
// .padding-top {
//   padding-top: unit 1;
// }
// .padding-top {
//   padding-top: unit 2;
// }
// .margin-top {
//   margin-top: unit 1;
// }
// .margin-top {
//   margin-top: unit 2;
// }

// @include variant((padding: (bottom: (one: unit 1, two: unit 2)))) using($class, $property, $side, $value-class, $value, $variant) {
//   #{$property}-#{$side}: #{$value};
// }
// .padding-bottom-one {
//   padding-bottom: unit 1;
// }
// .padding-bottom-two {
//   padding-bottom: unit 2;
// }

// @include variant(((padding, margin): ((top, bottom): (2: (unit 1) (unit 4), 3: unit 2)))) using($class, $property, $side, $value-class, $value, $variant) {
//   #{$property}-#{$side}: #{$value};
// }
// .padding-top-2 {
//   padding-top: unit 1 unit 4;
// }
// .padding-top-3 {
//   padding-top: unit 2;
// }
// .padding-bottom-2 {
//   padding-bottom: unit 1 unit 4;
// }
// .padding-bottom-3 {
//   padding-bottom: unit 2;
// }
// .margin-top-2 {
//   margin-top: unit 1 unit 4;
// }
// .margin-top-3 {
//   margin-top: unit 2;
// }
// .margin-bottom-2 {
//   margin-bottom: unit 1 unit 4;
// }
// .margin-bottom-3 {
//   margin-bottom: unit 2;
// }

// @include variant((border: ((top left, bottom right): ((xs, sm): red, (md, lg): green )))) using($resolved...) {
//   border-color: #{list.nth($resolved, 5)};
// }
// .border-top-left-xs, .border-top-left-sm {
//   border-color: red;
// }
// .border-top-left-md, .border-top-left-lg {
//   border-color: green;
// }
// .border-bottom-right-xs, .border-bottom-right-sm {
//   border-color: red;
// }
// .border-bottom-right-md, .border-bottom-right-lg {
//   border-color: green;
// }

// TODO:
// @include variant((border: ((left, bottom) color: ('red': red, 'green': green )))) using($resolved...) {
//   border-color: #{list.nth($resolved, 5)};
// }

// @include variant((border: ((): ( (xs, sm): red, (md, lg): green )))) using($resolved...) {
//   border-color: #{list.nth($resolved, 5)};
// }
// .border-xs, .border-sm {
//   border-color: red;
// }
// .border-md, .border-lg {
//   border-color: green;
// }





// ---
// class variant
// @include variant(((padding top, margin bottom): ((size 1,  size 2): (15px, 30px))), $content-type: map) using($resolved) {
//   #{map.get($resolved, property)}: #{map.get($resolved, value)};
// }
// .padding-top-size-1 {
//   padding top: 15px;
// }
// .padding-top-size-2 {
//   padding top: 15px;
// }
// .padding-top-size-1 {
//   padding top: 30px;
// }
// .padding-top-size-2 {
//   padding top: 30px;
// }
// .margin-bottom-size-1 {
//   margin bottom: 15px;
// }
// .margin-bottom-size-2 {
//   margin bottom: 15px;
// }
// .margin-bottom-size-1 {
//   margin bottom: 30px;
// }
// .margin-bottom-size-2 {
//   margin bottom: 30px;
// }

// @include variant(((padding top, margin bottom): ((left radius, right): ((size 1,  size 2): 15px))), $content-type: map) using($resolved) {
//   // @debug $resolved;

//   font: 100;
// }
// .padding-top-left-radius-size-1, .padding-top-left-radius-size-2 {
//   font: 100;
// }
// .padding-top-right-size-1, .padding-top-right-size-2 {
//   font: 100;
// }
// .margin-bottom-left-radius-size-1, .margin-bottom-left-radius-size-2 {
//   font: 100;
// }
// .margin-bottom-right-size-1, .margin-bottom-right-size-2 {
//   font: 100;
// }

// @include variant(((padding top, margin bottom): ((size 1,  size 2): 15px))) using($resolved...) {
//   @debug $resolved;
//   font: 100;
// }
// .padding-top-size-1 {
//   font: 100;
// }
// .padding-top-size-2 {
//   font: 100;
// }
// .margin-bottom-size-1 {
//   font: 100;
// }
// .margin-bottom-size-2 {
//   font: 100;
// }

// @include variant(((padding top, margin bottom): ((1, 2): 15px))) using($resolved...) {
//   @debug $resolved;
//   font: 100;
// }
// .padding-top-1 {
//   font: 100;
// }
// .padding-top-2 {
//   font: 100;
// }
// .margin-bottom-1 {
//   font: 100;
// }
// .margin-bottom-2 {
//   font: 100;
// }

// @include variant(((padding top, margin bottom): (1: 15px))) using($resolved...) {
//   @debug $resolved;
//   font: 100;
// }
// .padding-top-1 {
//   font: 100;
// }
// .margin-bottom-1 {
//   font: 100;
// }

// @include variant((padding: (1: 1px))) using($resolved...) {
//   @debug $resolved;
//   font: 100;
// }

// value variant
// @include variant(((padding bottom, padding top): (unit 1, unit 2))) using($resolved...) {
//   @debug $resolved;
//   font: 100;
// }

// @include variant(((padding bottom): (unit 1, unit 2))) using($resolved...) {
//   @debug $resolved;
//   font: 100;
// }

// @include variant(((padding bottom): unit 1)) using($resolved...) {
//   font: 100;
// }

// @include variant(((padding, margin): unit 1)) using($resolved...) {
//   font: 100;
// }

// @include variant((padding test: (size one: unit 1))) using($property, $value-class, $value) {
//   #{$property}: #{$value};
// }



// ---
// @include variant((variant basic: (value class one: value one, value class two: value two))) using($resolved...) {
//   @debug $resolved;
//   font: 100;
// }
// .variant-basic-value-class-one {
//   font: 100;
// }
// .variant-basic-value-class-two {
//   font: 100;
// }

// @include variant(((variant basic: (property1, property2)): (value class one: value one, value class two: value two))) using($resolved...) {
//   @debug $resolved;
//   font: 100;
// }
// .variant-basic-value-class-one {
//   font: 100;
// }
// .variant-basic-value-class-two {
//   font: 100;
// }

// @include variant((
//   (variant basic: (variant-property1, variant-property2)): (value class one: value one, value class two: value two),
//   (variant extended: variant-property2): (value class one: value one, value class two: value two),
// )) using($resolved...) {
//   @debug $resolved;

//   font: 100;
// }
// .variant-basic-value-class-one {
//   font: 100;
// }
// .variant-basic-value-class-two {
//   font: 100;
// }
// .variant-extended-value-class-one {
//   font: 100;
// }
// .variant-extended-value-class-two {
//   font: 100;
// }

// @include variant((
//   (variant basic: (property1, property2)): ((top, left): (value class one: value one, value class two: value two)),
//   // (variant extended: variant-property2): ((bottom, right): (value class one: value one, value class two: value two)),
// )) using($resolved...) {
//   @debug $resolved;

//   font: 100;
// }
// .variant-basic-top-value-class-one {
//   font: 100;
// }
// .variant-basic-top-value-class-two {
//   font: 100;
// }
// .variant-basic-left-value-class-one {
//   font: 100;
// }
// .variant-basic-left-value-class-two {
//   font: 100;
// }

// TODO: Do the side variant
// @include variant((
//   // (variant basic: (property1, property2)): (((top, left): color): (value class one: value one, value class two: value two)),
//   // (variant basic: (property1, property2)): (((top, left) color): (value class one: value one, value class two: value two)),
//   // (variant basic: (property1, property2)): ((--nest (top, left) color): (value class one: value one, value class two: value two)),
//   // (variant extended: variant-property2): ((bottom, right): (value class one: value one, value class two: value two)),
// ), $content-type: map) using($resolved) {
//   @debug $resolved;

//   font: 100;
// }
