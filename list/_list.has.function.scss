// Functions.
@use 'list.select.function' as list-select;

// Status: DONE
// The `list.has()` function checks whether `$list` contains any, all, only occurring required `$value` and additional `$values` compared by using `$operator`
// with `$list` elements.
// ? Occurrence `all` indicates `$value` and additional `$values` `$list` need to contain to return `true`
// ? Occurrence `any`/`first`/`last` indicates that one of required `$value` and additional `$values` found in`$list` return `true`
// ? Occurrence `only` indicates all `$list` elements equal to `$value` returning `true`
// @param `$list` The list to check whether it contains any, all, only occurring required `$value` and additional `$values` compared by using `$operator`.
// @param `$occurrence` Occurrence (all, any, only) of required `$value` and additional `$values`.
// @param `$operator` The operator of a `string` type to compare list elements with required `$value` and additional `$values`.
// @param `$value` The required value compared with `$list` elements by using `$operator` to check its existence in `$list`.
// @arbitrary `$values...` Additional values compared with `$list` elements by using `$operator` to check their existence in `$list`.
// @returns The returned value is `bool`, indicating `$list` has any, all, only occurring required `$value` and additional `$values` compared by using `$operator`.
// ? types: arglist bool calculation color function list map null number string
@function has($list, $occurrence: any, $operator: '==', $value, $values...) {
  @return list-select.select(
    has $occurrence,
    $list,
    value,
    $operator,
    $value,
    $values...
  );
}

// Examples.
// any
// @debug has(('a', 'b', 'c'), any, ':==', string); // true
// @debug has(('a', 'b', 'c'), any, ':==', string); // true
// @debug has(('a', 'b', 'c', 5123), any, ':==', number); // true
// @debug has(('a', null, 'b', 'c', 5123), any, ':==', null); // true
// @debug has(('a', ('b', 'c'), 5123), any, ':==', list); // true
// @debug has(('a', ('b': 'c'), 5123), any, ':==', map); // true
// @debug has(('a', 'b', 'c', 5123), any, ':==', list); // false

// only
// @debug has(('a', 'b', 'c'), only, ':==', string); // true
// @debug has((332, 551, 3123, 5123), only, ':==', number); // true
// @debug has(('a', 'b', 'c', 5123), only, ':==', number); // false
// @debug has(('a', null, 'b', 'c', 5123), only, ':==', null); // false
// @debug has(('a', ('b', 'c'), 5123), only, ':==', list); // false
// @debug has(('a', ('b': 'c'), 5123), only, ':==', map); // false

// any null
// @debug has(('a', ('b': 'c'), 5123, null, '27', 27), any, ':==', null); // true
// @debug has(('a', ('b': 'c'), 5123, null, '27', 27), any, ':==', null); // true
// @debug has(('a', ('b': 'c'), 5123, false, '27', 27), any, ':==', null); // false

// @debug 'Multiple --';
// @debug has(('a', 'b', 1, 'c'), any, ':==', number); // true
// @debug has(('a', 'b', 'c'), any, ':==', string, number, bool); // true
// @debug has(('a', false, 'b', 'c'), any, ':==', bool); // true
// @debug has(('a', 'b', 'c', null), any, ':==', null); // true
// @debug has(('a', ('b', 'c'), null), any, ':==', list); // true
// @debug has(('a', ('b', 'c'), 4, null), any, ':==', string, null, list, number); // true
// @debug has(('a', ('b', 'c'), 4, null, ('a': 1)), any, ':==', string, null, list, number, map); // true

// @debug '--';
// @debug has(('a', 'b', 'c'), any, ':==', bool, null); // false
// @debug has(('a', 'b', 1, 'c'), any, ':==', list, map, bool); // false
// @debug has(('a', false, 'b', 'c'), any, ':==', number, null); // false
// @debug has(('a', false, 'b', 'c'), any, ':==', list); // false
// @debug has(('a', ('b', 'c'), null), any, ':==', string, list, null, number); // true
